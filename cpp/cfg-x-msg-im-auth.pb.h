// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg-x-msg-im-auth.proto

#ifndef PROTOBUF_cfg_2dx_2dmsg_2dim_2dauth_2eproto__INCLUDED
#define PROTOBUF_cfg_2dx_2dmsg_2dim_2dauth_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[17];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsXmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUseImpl();
void InitDefaultsXmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse();
void InitDefaultsXmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUseImpl();
void InitDefaultsXmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse();
void InitDefaultsXmsgImAuthCfgPb_KafkaProdEntry_DoNotUseImpl();
void InitDefaultsXmsgImAuthCfgPb_KafkaProdEntry_DoNotUse();
void InitDefaultsXmsgImAuthCfgPbImpl();
void InitDefaultsXmsgImAuthCfgPb();
void InitDefaultsXmsgImAuthCfgMongodbImpl();
void InitDefaultsXmsgImAuthCfgMongodb();
void InitDefaultsXmsgImAuthCfgMysqlImpl();
void InitDefaultsXmsgImAuthCfgMysql();
void InitDefaultsXmsgImAuthCfgLogImpl();
void InitDefaultsXmsgImAuthCfgLog();
void InitDefaultsXmsgImAuthCfgXscTcpServerImpl();
void InitDefaultsXmsgImAuthCfgXscTcpServer();
void InitDefaultsXmsgImAuthCfgXscHttpServerImpl();
void InitDefaultsXmsgImAuthCfgXscHttpServer();
void InitDefaultsXmsgImAuthCfgXscWebSocketServerImpl();
void InitDefaultsXmsgImAuthCfgXscWebSocketServer();
void InitDefaultsXmsgImAuthCfgXscUdpServerImpl();
void InitDefaultsXmsgImAuthCfgXscUdpServer();
void InitDefaultsXmsgImAuthCfgXscRudpServerImpl();
void InitDefaultsXmsgImAuthCfgXscRudpServer();
void InitDefaultsXmsgImAuthCfgXmsgNeH2nAddrImpl();
void InitDefaultsXmsgImAuthCfgXmsgNeH2nAddr();
void InitDefaultsXmsgImAuthCfgXmsgNeN2hAddrImpl();
void InitDefaultsXmsgImAuthCfgXmsgNeN2hAddr();
void InitDefaultsXmsgImAuthPubServiceImpl();
void InitDefaultsXmsgImAuthPubService();
void InitDefaultsXmsgImAuthPubServiceAddressImpl();
void InitDefaultsXmsgImAuthPubServiceAddress();
void InitDefaultsXmsgImAuthCfgMiscImpl();
void InitDefaultsXmsgImAuthCfgMisc();
inline void InitDefaults() {
  InitDefaultsXmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse();
  InitDefaultsXmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse();
  InitDefaultsXmsgImAuthCfgPb_KafkaProdEntry_DoNotUse();
  InitDefaultsXmsgImAuthCfgPb();
  InitDefaultsXmsgImAuthCfgMongodb();
  InitDefaultsXmsgImAuthCfgMysql();
  InitDefaultsXmsgImAuthCfgLog();
  InitDefaultsXmsgImAuthCfgXscTcpServer();
  InitDefaultsXmsgImAuthCfgXscHttpServer();
  InitDefaultsXmsgImAuthCfgXscWebSocketServer();
  InitDefaultsXmsgImAuthCfgXscUdpServer();
  InitDefaultsXmsgImAuthCfgXscRudpServer();
  InitDefaultsXmsgImAuthCfgXmsgNeH2nAddr();
  InitDefaultsXmsgImAuthCfgXmsgNeN2hAddr();
  InitDefaultsXmsgImAuthPubService();
  InitDefaultsXmsgImAuthPubServiceAddress();
  InitDefaultsXmsgImAuthCfgMisc();
}
}  // namespace protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto
class XmsgImAuthCfgLog;
class XmsgImAuthCfgLogDefaultTypeInternal;
extern XmsgImAuthCfgLogDefaultTypeInternal _XmsgImAuthCfgLog_default_instance_;
class XmsgImAuthCfgMisc;
class XmsgImAuthCfgMiscDefaultTypeInternal;
extern XmsgImAuthCfgMiscDefaultTypeInternal _XmsgImAuthCfgMisc_default_instance_;
class XmsgImAuthCfgMongodb;
class XmsgImAuthCfgMongodbDefaultTypeInternal;
extern XmsgImAuthCfgMongodbDefaultTypeInternal _XmsgImAuthCfgMongodb_default_instance_;
class XmsgImAuthCfgMysql;
class XmsgImAuthCfgMysqlDefaultTypeInternal;
extern XmsgImAuthCfgMysqlDefaultTypeInternal _XmsgImAuthCfgMysql_default_instance_;
class XmsgImAuthCfgPb;
class XmsgImAuthCfgPbDefaultTypeInternal;
extern XmsgImAuthCfgPbDefaultTypeInternal _XmsgImAuthCfgPb_default_instance_;
class XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse;
class XmsgImAuthCfgPb_KafkaProdEntry_DoNotUseDefaultTypeInternal;
extern XmsgImAuthCfgPb_KafkaProdEntry_DoNotUseDefaultTypeInternal _XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse_default_instance_;
class XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse;
class XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUseDefaultTypeInternal;
extern XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUseDefaultTypeInternal _XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse_default_instance_;
class XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse;
class XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUseDefaultTypeInternal;
extern XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUseDefaultTypeInternal _XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse_default_instance_;
class XmsgImAuthCfgXmsgNeH2nAddr;
class XmsgImAuthCfgXmsgNeH2nAddrDefaultTypeInternal;
extern XmsgImAuthCfgXmsgNeH2nAddrDefaultTypeInternal _XmsgImAuthCfgXmsgNeH2nAddr_default_instance_;
class XmsgImAuthCfgXmsgNeN2hAddr;
class XmsgImAuthCfgXmsgNeN2hAddrDefaultTypeInternal;
extern XmsgImAuthCfgXmsgNeN2hAddrDefaultTypeInternal _XmsgImAuthCfgXmsgNeN2hAddr_default_instance_;
class XmsgImAuthCfgXscHttpServer;
class XmsgImAuthCfgXscHttpServerDefaultTypeInternal;
extern XmsgImAuthCfgXscHttpServerDefaultTypeInternal _XmsgImAuthCfgXscHttpServer_default_instance_;
class XmsgImAuthCfgXscRudpServer;
class XmsgImAuthCfgXscRudpServerDefaultTypeInternal;
extern XmsgImAuthCfgXscRudpServerDefaultTypeInternal _XmsgImAuthCfgXscRudpServer_default_instance_;
class XmsgImAuthCfgXscTcpServer;
class XmsgImAuthCfgXscTcpServerDefaultTypeInternal;
extern XmsgImAuthCfgXscTcpServerDefaultTypeInternal _XmsgImAuthCfgXscTcpServer_default_instance_;
class XmsgImAuthCfgXscUdpServer;
class XmsgImAuthCfgXscUdpServerDefaultTypeInternal;
extern XmsgImAuthCfgXscUdpServerDefaultTypeInternal _XmsgImAuthCfgXscUdpServer_default_instance_;
class XmsgImAuthCfgXscWebSocketServer;
class XmsgImAuthCfgXscWebSocketServerDefaultTypeInternal;
extern XmsgImAuthCfgXscWebSocketServerDefaultTypeInternal _XmsgImAuthCfgXscWebSocketServer_default_instance_;
class XmsgImAuthPubService;
class XmsgImAuthPubServiceDefaultTypeInternal;
extern XmsgImAuthPubServiceDefaultTypeInternal _XmsgImAuthPubService_default_instance_;
class XmsgImAuthPubServiceAddress;
class XmsgImAuthPubServiceAddressDefaultTypeInternal;
extern XmsgImAuthPubServiceAddressDefaultTypeInternal _XmsgImAuthPubServiceAddress_default_instance_;

// ===================================================================

class XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse, 
    ::std::string, ::XmsgImAuthPubService,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse, 
    ::std::string, ::XmsgImAuthPubService,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse();
  XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse& other);
  static const XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse*>(&_XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse, 
    ::std::string, ::XmsgImAuthPubService,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse, 
    ::std::string, ::XmsgImAuthPubService,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse();
  XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse& other);
  static const XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse*>(&_XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse();
  XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse& other);
  static const XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse*>(&_XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class XmsgImAuthCfgPb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImAuthCfgPb) */ {
 public:
  XmsgImAuthCfgPb();
  virtual ~XmsgImAuthCfgPb();

  XmsgImAuthCfgPb(const XmsgImAuthCfgPb& from);

  inline XmsgImAuthCfgPb& operator=(const XmsgImAuthCfgPb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImAuthCfgPb(XmsgImAuthCfgPb&& from) noexcept
    : XmsgImAuthCfgPb() {
    *this = ::std::move(from);
  }

  inline XmsgImAuthCfgPb& operator=(XmsgImAuthCfgPb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImAuthCfgPb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImAuthCfgPb* internal_default_instance() {
    return reinterpret_cast<const XmsgImAuthCfgPb*>(
               &_XmsgImAuthCfgPb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(XmsgImAuthCfgPb* other);
  friend void swap(XmsgImAuthCfgPb& a, XmsgImAuthCfgPb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImAuthCfgPb* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImAuthCfgPb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImAuthCfgPb& from);
  void MergeFrom(const XmsgImAuthCfgPb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImAuthCfgPb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .XmsgImAuthCfgXmsgNeH2nAddr h2n = 12;
  int h2n_size() const;
  void clear_h2n();
  static const int kH2NFieldNumber = 12;
  const ::XmsgImAuthCfgXmsgNeH2nAddr& h2n(int index) const;
  ::XmsgImAuthCfgXmsgNeH2nAddr* mutable_h2n(int index);
  ::XmsgImAuthCfgXmsgNeH2nAddr* add_h2n();
  ::google::protobuf::RepeatedPtrField< ::XmsgImAuthCfgXmsgNeH2nAddr >*
      mutable_h2n();
  const ::google::protobuf::RepeatedPtrField< ::XmsgImAuthCfgXmsgNeH2nAddr >&
      h2n() const;

  // repeated .XmsgImAuthCfgXmsgNeN2hAddr n2h = 13;
  int n2h_size() const;
  void clear_n2h();
  static const int kN2HFieldNumber = 13;
  const ::XmsgImAuthCfgXmsgNeN2hAddr& n2h(int index) const;
  ::XmsgImAuthCfgXmsgNeN2hAddr* mutable_n2h(int index);
  ::XmsgImAuthCfgXmsgNeN2hAddr* add_n2h();
  ::google::protobuf::RepeatedPtrField< ::XmsgImAuthCfgXmsgNeN2hAddr >*
      mutable_n2h();
  const ::google::protobuf::RepeatedPtrField< ::XmsgImAuthCfgXmsgNeN2hAddr >&
      n2h() const;

  // map<string, string> kafkaProd = 15;
  int kafkaprod_size() const;
  void clear_kafkaprod();
  static const int kKafkaProdFieldNumber = 15;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      kafkaprod() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_kafkaprod();

  // map<string, .XmsgImAuthPubService> xmsgApServiceAddr = 18;
  int xmsgapserviceaddr_size() const;
  void clear_xmsgapserviceaddr();
  static const int kXmsgApServiceAddrFieldNumber = 18;
  const ::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >&
      xmsgapserviceaddr() const;
  ::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >*
      mutable_xmsgapserviceaddr();

  // map<string, .XmsgImAuthPubService> xmsgOssServiceAddr = 19;
  int xmsgossserviceaddr_size() const;
  void clear_xmsgossserviceaddr();
  static const int kXmsgOssServiceAddrFieldNumber = 19;
  const ::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >&
      xmsgossserviceaddr() const;
  ::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >*
      mutable_xmsgossserviceaddr();

  // string cgt = 1;
  void clear_cgt();
  static const int kCgtFieldNumber = 1;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // string cfgType = 2;
  void clear_cfgtype();
  static const int kCfgTypeFieldNumber = 2;
  const ::std::string& cfgtype() const;
  void set_cfgtype(const ::std::string& value);
  #if LANG_CXX11
  void set_cfgtype(::std::string&& value);
  #endif
  void set_cfgtype(const char* value);
  void set_cfgtype(const char* value, size_t size);
  ::std::string* mutable_cfgtype();
  ::std::string* release_cfgtype();
  void set_allocated_cfgtype(::std::string* cfgtype);

  // .XmsgImAuthCfgMongodb mongodb = 3;
  bool has_mongodb() const;
  void clear_mongodb();
  static const int kMongodbFieldNumber = 3;
  const ::XmsgImAuthCfgMongodb& mongodb() const;
  ::XmsgImAuthCfgMongodb* release_mongodb();
  ::XmsgImAuthCfgMongodb* mutable_mongodb();
  void set_allocated_mongodb(::XmsgImAuthCfgMongodb* mongodb);

  // .XmsgImAuthCfgMysql mysql = 4;
  bool has_mysql() const;
  void clear_mysql();
  static const int kMysqlFieldNumber = 4;
  const ::XmsgImAuthCfgMysql& mysql() const;
  ::XmsgImAuthCfgMysql* release_mysql();
  ::XmsgImAuthCfgMysql* mutable_mysql();
  void set_allocated_mysql(::XmsgImAuthCfgMysql* mysql);

  // .XmsgImAuthCfgLog log = 5;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 5;
  const ::XmsgImAuthCfgLog& log() const;
  ::XmsgImAuthCfgLog* release_log();
  ::XmsgImAuthCfgLog* mutable_log();
  void set_allocated_log(::XmsgImAuthCfgLog* log);

  // .XmsgImAuthCfgXscTcpServer pubTcp = 6;
  bool has_pubtcp() const;
  void clear_pubtcp();
  static const int kPubTcpFieldNumber = 6;
  const ::XmsgImAuthCfgXscTcpServer& pubtcp() const;
  ::XmsgImAuthCfgXscTcpServer* release_pubtcp();
  ::XmsgImAuthCfgXscTcpServer* mutable_pubtcp();
  void set_allocated_pubtcp(::XmsgImAuthCfgXscTcpServer* pubtcp);

  // .XmsgImAuthCfgXscHttpServer pubHttp = 7;
  bool has_pubhttp() const;
  void clear_pubhttp();
  static const int kPubHttpFieldNumber = 7;
  const ::XmsgImAuthCfgXscHttpServer& pubhttp() const;
  ::XmsgImAuthCfgXscHttpServer* release_pubhttp();
  ::XmsgImAuthCfgXscHttpServer* mutable_pubhttp();
  void set_allocated_pubhttp(::XmsgImAuthCfgXscHttpServer* pubhttp);

  // .XmsgImAuthCfgXscWebSocketServer pubWebSocket = 8;
  bool has_pubwebsocket() const;
  void clear_pubwebsocket();
  static const int kPubWebSocketFieldNumber = 8;
  const ::XmsgImAuthCfgXscWebSocketServer& pubwebsocket() const;
  ::XmsgImAuthCfgXscWebSocketServer* release_pubwebsocket();
  ::XmsgImAuthCfgXscWebSocketServer* mutable_pubwebsocket();
  void set_allocated_pubwebsocket(::XmsgImAuthCfgXscWebSocketServer* pubwebsocket);

  // .XmsgImAuthCfgXscUdpServer pubUdp = 9;
  bool has_pubudp() const;
  void clear_pubudp();
  static const int kPubUdpFieldNumber = 9;
  const ::XmsgImAuthCfgXscUdpServer& pubudp() const;
  ::XmsgImAuthCfgXscUdpServer* release_pubudp();
  ::XmsgImAuthCfgXscUdpServer* mutable_pubudp();
  void set_allocated_pubudp(::XmsgImAuthCfgXscUdpServer* pubudp);

  // .XmsgImAuthCfgXscRudpServer pubRudp = 10;
  bool has_pubrudp() const;
  void clear_pubrudp();
  static const int kPubRudpFieldNumber = 10;
  const ::XmsgImAuthCfgXscRudpServer& pubrudp() const;
  ::XmsgImAuthCfgXscRudpServer* release_pubrudp();
  ::XmsgImAuthCfgXscRudpServer* mutable_pubrudp();
  void set_allocated_pubrudp(::XmsgImAuthCfgXscRudpServer* pubrudp);

  // .XmsgImAuthCfgXscTcpServer priTcp = 11;
  bool has_pritcp() const;
  void clear_pritcp();
  static const int kPriTcpFieldNumber = 11;
  const ::XmsgImAuthCfgXscTcpServer& pritcp() const;
  ::XmsgImAuthCfgXscTcpServer* release_pritcp();
  ::XmsgImAuthCfgXscTcpServer* mutable_pritcp();
  void set_allocated_pritcp(::XmsgImAuthCfgXscTcpServer* pritcp);

  // .XmsgImAuthCfgMisc misc = 14;
  bool has_misc() const;
  void clear_misc();
  static const int kMiscFieldNumber = 14;
  const ::XmsgImAuthCfgMisc& misc() const;
  ::XmsgImAuthCfgMisc* release_misc();
  ::XmsgImAuthCfgMisc* mutable_misc();
  void set_allocated_misc(::XmsgImAuthCfgMisc* misc);

  // uint64 gts = 16;
  void clear_gts();
  static const int kGtsFieldNumber = 16;
  ::google::protobuf::uint64 gts() const;
  void set_gts(::google::protobuf::uint64 value);

  // uint64 uts = 17;
  void clear_uts();
  static const int kUtsFieldNumber = 17;
  ::google::protobuf::uint64 uts() const;
  void set_uts(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:XmsgImAuthCfgPb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::XmsgImAuthCfgXmsgNeH2nAddr > h2n_;
  ::google::protobuf::RepeatedPtrField< ::XmsgImAuthCfgXmsgNeN2hAddr > n2h_;
  ::google::protobuf::internal::MapField<
      XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > kafkaprod_;
  ::google::protobuf::internal::MapField<
      XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse,
      ::std::string, ::XmsgImAuthPubService,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > xmsgapserviceaddr_;
  ::google::protobuf::internal::MapField<
      XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse,
      ::std::string, ::XmsgImAuthPubService,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > xmsgossserviceaddr_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::internal::ArenaStringPtr cfgtype_;
  ::XmsgImAuthCfgMongodb* mongodb_;
  ::XmsgImAuthCfgMysql* mysql_;
  ::XmsgImAuthCfgLog* log_;
  ::XmsgImAuthCfgXscTcpServer* pubtcp_;
  ::XmsgImAuthCfgXscHttpServer* pubhttp_;
  ::XmsgImAuthCfgXscWebSocketServer* pubwebsocket_;
  ::XmsgImAuthCfgXscUdpServer* pubudp_;
  ::XmsgImAuthCfgXscRudpServer* pubrudp_;
  ::XmsgImAuthCfgXscTcpServer* pritcp_;
  ::XmsgImAuthCfgMisc* misc_;
  ::google::protobuf::uint64 gts_;
  ::google::protobuf::uint64 uts_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgPbImpl();
};
// -------------------------------------------------------------------

class XmsgImAuthCfgMongodb : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImAuthCfgMongodb) */ {
 public:
  XmsgImAuthCfgMongodb();
  virtual ~XmsgImAuthCfgMongodb();

  XmsgImAuthCfgMongodb(const XmsgImAuthCfgMongodb& from);

  inline XmsgImAuthCfgMongodb& operator=(const XmsgImAuthCfgMongodb& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImAuthCfgMongodb(XmsgImAuthCfgMongodb&& from) noexcept
    : XmsgImAuthCfgMongodb() {
    *this = ::std::move(from);
  }

  inline XmsgImAuthCfgMongodb& operator=(XmsgImAuthCfgMongodb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImAuthCfgMongodb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImAuthCfgMongodb* internal_default_instance() {
    return reinterpret_cast<const XmsgImAuthCfgMongodb*>(
               &_XmsgImAuthCfgMongodb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(XmsgImAuthCfgMongodb* other);
  friend void swap(XmsgImAuthCfgMongodb& a, XmsgImAuthCfgMongodb& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImAuthCfgMongodb* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImAuthCfgMongodb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImAuthCfgMongodb& from);
  void MergeFrom(const XmsgImAuthCfgMongodb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImAuthCfgMongodb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uri = 1;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_uri(::std::string&& value);
  #endif
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // @@protoc_insertion_point(class_scope:XmsgImAuthCfgMongodb)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgMongodbImpl();
};
// -------------------------------------------------------------------

class XmsgImAuthCfgMysql : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImAuthCfgMysql) */ {
 public:
  XmsgImAuthCfgMysql();
  virtual ~XmsgImAuthCfgMysql();

  XmsgImAuthCfgMysql(const XmsgImAuthCfgMysql& from);

  inline XmsgImAuthCfgMysql& operator=(const XmsgImAuthCfgMysql& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImAuthCfgMysql(XmsgImAuthCfgMysql&& from) noexcept
    : XmsgImAuthCfgMysql() {
    *this = ::std::move(from);
  }

  inline XmsgImAuthCfgMysql& operator=(XmsgImAuthCfgMysql&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImAuthCfgMysql& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImAuthCfgMysql* internal_default_instance() {
    return reinterpret_cast<const XmsgImAuthCfgMysql*>(
               &_XmsgImAuthCfgMysql_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(XmsgImAuthCfgMysql* other);
  friend void swap(XmsgImAuthCfgMysql& a, XmsgImAuthCfgMysql& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImAuthCfgMysql* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImAuthCfgMysql* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImAuthCfgMysql& from);
  void MergeFrom(const XmsgImAuthCfgMysql& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImAuthCfgMysql* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string db = 3;
  void clear_db();
  static const int kDbFieldNumber = 3;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // string usr = 4;
  void clear_usr();
  static const int kUsrFieldNumber = 4;
  const ::std::string& usr() const;
  void set_usr(const ::std::string& value);
  #if LANG_CXX11
  void set_usr(::std::string&& value);
  #endif
  void set_usr(const char* value);
  void set_usr(const char* value, size_t size);
  ::std::string* mutable_usr();
  ::std::string* release_usr();
  void set_allocated_usr(::std::string* usr);

  // string password = 5;
  void clear_password();
  static const int kPasswordFieldNumber = 5;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint32 poolSize = 6;
  void clear_poolsize();
  static const int kPoolSizeFieldNumber = 6;
  ::google::protobuf::uint32 poolsize() const;
  void set_poolsize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImAuthCfgMysql)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::internal::ArenaStringPtr usr_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 poolsize_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgMysqlImpl();
};
// -------------------------------------------------------------------

class XmsgImAuthCfgLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImAuthCfgLog) */ {
 public:
  XmsgImAuthCfgLog();
  virtual ~XmsgImAuthCfgLog();

  XmsgImAuthCfgLog(const XmsgImAuthCfgLog& from);

  inline XmsgImAuthCfgLog& operator=(const XmsgImAuthCfgLog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImAuthCfgLog(XmsgImAuthCfgLog&& from) noexcept
    : XmsgImAuthCfgLog() {
    *this = ::std::move(from);
  }

  inline XmsgImAuthCfgLog& operator=(XmsgImAuthCfgLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImAuthCfgLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImAuthCfgLog* internal_default_instance() {
    return reinterpret_cast<const XmsgImAuthCfgLog*>(
               &_XmsgImAuthCfgLog_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(XmsgImAuthCfgLog* other);
  friend void swap(XmsgImAuthCfgLog& a, XmsgImAuthCfgLog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImAuthCfgLog* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImAuthCfgLog* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImAuthCfgLog& from);
  void MergeFrom(const XmsgImAuthCfgLog& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImAuthCfgLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  const ::std::string& level() const;
  void set_level(const ::std::string& value);
  #if LANG_CXX11
  void set_level(::std::string&& value);
  #endif
  void set_level(const char* value);
  void set_level(const char* value, size_t size);
  ::std::string* mutable_level();
  ::std::string* release_level();
  void set_allocated_level(::std::string* level);

  // string output = 2;
  void clear_output();
  static const int kOutputFieldNumber = 2;
  const ::std::string& output() const;
  void set_output(const ::std::string& value);
  #if LANG_CXX11
  void set_output(::std::string&& value);
  #endif
  void set_output(const char* value);
  void set_output(const char* value, size_t size);
  ::std::string* mutable_output();
  ::std::string* release_output();
  void set_allocated_output(::std::string* output);

  // @@protoc_insertion_point(class_scope:XmsgImAuthCfgLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr level_;
  ::google::protobuf::internal::ArenaStringPtr output_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgLogImpl();
};
// -------------------------------------------------------------------

class XmsgImAuthCfgXscTcpServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImAuthCfgXscTcpServer) */ {
 public:
  XmsgImAuthCfgXscTcpServer();
  virtual ~XmsgImAuthCfgXscTcpServer();

  XmsgImAuthCfgXscTcpServer(const XmsgImAuthCfgXscTcpServer& from);

  inline XmsgImAuthCfgXscTcpServer& operator=(const XmsgImAuthCfgXscTcpServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImAuthCfgXscTcpServer(XmsgImAuthCfgXscTcpServer&& from) noexcept
    : XmsgImAuthCfgXscTcpServer() {
    *this = ::std::move(from);
  }

  inline XmsgImAuthCfgXscTcpServer& operator=(XmsgImAuthCfgXscTcpServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImAuthCfgXscTcpServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImAuthCfgXscTcpServer* internal_default_instance() {
    return reinterpret_cast<const XmsgImAuthCfgXscTcpServer*>(
               &_XmsgImAuthCfgXscTcpServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(XmsgImAuthCfgXscTcpServer* other);
  friend void swap(XmsgImAuthCfgXscTcpServer& a, XmsgImAuthCfgXscTcpServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImAuthCfgXscTcpServer* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImAuthCfgXscTcpServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImAuthCfgXscTcpServer& from);
  void MergeFrom(const XmsgImAuthCfgXscTcpServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImAuthCfgXscTcpServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // uint32 worker = 2;
  void clear_worker();
  static const int kWorkerFieldNumber = 2;
  ::google::protobuf::uint32 worker() const;
  void set_worker(::google::protobuf::uint32 value);

  // uint32 peerLimit = 3;
  void clear_peerlimit();
  static const int kPeerLimitFieldNumber = 3;
  ::google::protobuf::uint32 peerlimit() const;
  void set_peerlimit(::google::protobuf::uint32 value);

  // uint32 peerMtu = 4;
  void clear_peermtu();
  static const int kPeerMtuFieldNumber = 4;
  ::google::protobuf::uint32 peermtu() const;
  void set_peermtu(::google::protobuf::uint32 value);

  // uint32 peerRcvBuf = 5;
  void clear_peerrcvbuf();
  static const int kPeerRcvBufFieldNumber = 5;
  ::google::protobuf::uint32 peerrcvbuf() const;
  void set_peerrcvbuf(::google::protobuf::uint32 value);

  // uint32 peerSndBuf = 6;
  void clear_peersndbuf();
  static const int kPeerSndBufFieldNumber = 6;
  ::google::protobuf::uint32 peersndbuf() const;
  void set_peersndbuf(::google::protobuf::uint32 value);

  // uint32 lazyClose = 7;
  void clear_lazyclose();
  static const int kLazyCloseFieldNumber = 7;
  ::google::protobuf::uint32 lazyclose() const;
  void set_lazyclose(::google::protobuf::uint32 value);

  // uint32 heartbeat = 9;
  void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 9;
  ::google::protobuf::uint32 heartbeat() const;
  void set_heartbeat(::google::protobuf::uint32 value);

  // uint32 n2hZombie = 10;
  void clear_n2hzombie();
  static const int kN2HZombieFieldNumber = 10;
  ::google::protobuf::uint32 n2hzombie() const;
  void set_n2hzombie(::google::protobuf::uint32 value);

  // bool tracing = 8;
  void clear_tracing();
  static const int kTracingFieldNumber = 8;
  bool tracing() const;
  void set_tracing(bool value);

  // bool n2hTracing = 12;
  void clear_n2htracing();
  static const int kN2HTracingFieldNumber = 12;
  bool n2htracing() const;
  void set_n2htracing(bool value);

  // uint32 n2hTransTimeout = 11;
  void clear_n2htranstimeout();
  static const int kN2HTransTimeoutFieldNumber = 11;
  ::google::protobuf::uint32 n2htranstimeout() const;
  void set_n2htranstimeout(::google::protobuf::uint32 value);

  // uint32 h2nReConn = 13;
  void clear_h2nreconn();
  static const int kH2NReConnFieldNumber = 13;
  ::google::protobuf::uint32 h2nreconn() const;
  void set_h2nreconn(::google::protobuf::uint32 value);

  // uint32 h2nTransTimeout = 14;
  void clear_h2ntranstimeout();
  static const int kH2NTransTimeoutFieldNumber = 14;
  ::google::protobuf::uint32 h2ntranstimeout() const;
  void set_h2ntranstimeout(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImAuthCfgXscTcpServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::uint32 worker_;
  ::google::protobuf::uint32 peerlimit_;
  ::google::protobuf::uint32 peermtu_;
  ::google::protobuf::uint32 peerrcvbuf_;
  ::google::protobuf::uint32 peersndbuf_;
  ::google::protobuf::uint32 lazyclose_;
  ::google::protobuf::uint32 heartbeat_;
  ::google::protobuf::uint32 n2hzombie_;
  bool tracing_;
  bool n2htracing_;
  ::google::protobuf::uint32 n2htranstimeout_;
  ::google::protobuf::uint32 h2nreconn_;
  ::google::protobuf::uint32 h2ntranstimeout_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscTcpServerImpl();
};
// -------------------------------------------------------------------

class XmsgImAuthCfgXscHttpServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImAuthCfgXscHttpServer) */ {
 public:
  XmsgImAuthCfgXscHttpServer();
  virtual ~XmsgImAuthCfgXscHttpServer();

  XmsgImAuthCfgXscHttpServer(const XmsgImAuthCfgXscHttpServer& from);

  inline XmsgImAuthCfgXscHttpServer& operator=(const XmsgImAuthCfgXscHttpServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImAuthCfgXscHttpServer(XmsgImAuthCfgXscHttpServer&& from) noexcept
    : XmsgImAuthCfgXscHttpServer() {
    *this = ::std::move(from);
  }

  inline XmsgImAuthCfgXscHttpServer& operator=(XmsgImAuthCfgXscHttpServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImAuthCfgXscHttpServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImAuthCfgXscHttpServer* internal_default_instance() {
    return reinterpret_cast<const XmsgImAuthCfgXscHttpServer*>(
               &_XmsgImAuthCfgXscHttpServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(XmsgImAuthCfgXscHttpServer* other);
  friend void swap(XmsgImAuthCfgXscHttpServer& a, XmsgImAuthCfgXscHttpServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImAuthCfgXscHttpServer* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImAuthCfgXscHttpServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImAuthCfgXscHttpServer& from);
  void MergeFrom(const XmsgImAuthCfgXscHttpServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImAuthCfgXscHttpServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string requiredHeader = 5;
  int requiredheader_size() const;
  void clear_requiredheader();
  static const int kRequiredHeaderFieldNumber = 5;
  const ::std::string& requiredheader(int index) const;
  ::std::string* mutable_requiredheader(int index);
  void set_requiredheader(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_requiredheader(int index, ::std::string&& value);
  #endif
  void set_requiredheader(int index, const char* value);
  void set_requiredheader(int index, const char* value, size_t size);
  ::std::string* add_requiredheader();
  void add_requiredheader(const ::std::string& value);
  #if LANG_CXX11
  void add_requiredheader(::std::string&& value);
  #endif
  void add_requiredheader(const char* value);
  void add_requiredheader(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& requiredheader() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_requiredheader();

  // .XmsgImAuthCfgXscTcpServer tcp = 1;
  bool has_tcp() const;
  void clear_tcp();
  static const int kTcpFieldNumber = 1;
  const ::XmsgImAuthCfgXscTcpServer& tcp() const;
  ::XmsgImAuthCfgXscTcpServer* release_tcp();
  ::XmsgImAuthCfgXscTcpServer* mutable_tcp();
  void set_allocated_tcp(::XmsgImAuthCfgXscTcpServer* tcp);

  // uint32 headerLimit = 2;
  void clear_headerlimit();
  static const int kHeaderLimitFieldNumber = 2;
  ::google::protobuf::uint32 headerlimit() const;
  void set_headerlimit(::google::protobuf::uint32 value);

  // uint32 bodyLimit = 3;
  void clear_bodylimit();
  static const int kBodyLimitFieldNumber = 3;
  ::google::protobuf::uint32 bodylimit() const;
  void set_bodylimit(::google::protobuf::uint32 value);

  // uint32 closeWait = 4;
  void clear_closewait();
  static const int kCloseWaitFieldNumber = 4;
  ::google::protobuf::uint32 closewait() const;
  void set_closewait(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImAuthCfgXscHttpServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> requiredheader_;
  ::XmsgImAuthCfgXscTcpServer* tcp_;
  ::google::protobuf::uint32 headerlimit_;
  ::google::protobuf::uint32 bodylimit_;
  ::google::protobuf::uint32 closewait_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscHttpServerImpl();
};
// -------------------------------------------------------------------

class XmsgImAuthCfgXscWebSocketServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImAuthCfgXscWebSocketServer) */ {
 public:
  XmsgImAuthCfgXscWebSocketServer();
  virtual ~XmsgImAuthCfgXscWebSocketServer();

  XmsgImAuthCfgXscWebSocketServer(const XmsgImAuthCfgXscWebSocketServer& from);

  inline XmsgImAuthCfgXscWebSocketServer& operator=(const XmsgImAuthCfgXscWebSocketServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImAuthCfgXscWebSocketServer(XmsgImAuthCfgXscWebSocketServer&& from) noexcept
    : XmsgImAuthCfgXscWebSocketServer() {
    *this = ::std::move(from);
  }

  inline XmsgImAuthCfgXscWebSocketServer& operator=(XmsgImAuthCfgXscWebSocketServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImAuthCfgXscWebSocketServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImAuthCfgXscWebSocketServer* internal_default_instance() {
    return reinterpret_cast<const XmsgImAuthCfgXscWebSocketServer*>(
               &_XmsgImAuthCfgXscWebSocketServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(XmsgImAuthCfgXscWebSocketServer* other);
  friend void swap(XmsgImAuthCfgXscWebSocketServer& a, XmsgImAuthCfgXscWebSocketServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImAuthCfgXscWebSocketServer* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImAuthCfgXscWebSocketServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImAuthCfgXscWebSocketServer& from);
  void MergeFrom(const XmsgImAuthCfgXscWebSocketServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImAuthCfgXscWebSocketServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .XmsgImAuthCfgXscTcpServer tcp = 1;
  bool has_tcp() const;
  void clear_tcp();
  static const int kTcpFieldNumber = 1;
  const ::XmsgImAuthCfgXscTcpServer& tcp() const;
  ::XmsgImAuthCfgXscTcpServer* release_tcp();
  ::XmsgImAuthCfgXscTcpServer* mutable_tcp();
  void set_allocated_tcp(::XmsgImAuthCfgXscTcpServer* tcp);

  // @@protoc_insertion_point(class_scope:XmsgImAuthCfgXscWebSocketServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::XmsgImAuthCfgXscTcpServer* tcp_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscWebSocketServerImpl();
};
// -------------------------------------------------------------------

class XmsgImAuthCfgXscUdpServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImAuthCfgXscUdpServer) */ {
 public:
  XmsgImAuthCfgXscUdpServer();
  virtual ~XmsgImAuthCfgXscUdpServer();

  XmsgImAuthCfgXscUdpServer(const XmsgImAuthCfgXscUdpServer& from);

  inline XmsgImAuthCfgXscUdpServer& operator=(const XmsgImAuthCfgXscUdpServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImAuthCfgXscUdpServer(XmsgImAuthCfgXscUdpServer&& from) noexcept
    : XmsgImAuthCfgXscUdpServer() {
    *this = ::std::move(from);
  }

  inline XmsgImAuthCfgXscUdpServer& operator=(XmsgImAuthCfgXscUdpServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImAuthCfgXscUdpServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImAuthCfgXscUdpServer* internal_default_instance() {
    return reinterpret_cast<const XmsgImAuthCfgXscUdpServer*>(
               &_XmsgImAuthCfgXscUdpServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(XmsgImAuthCfgXscUdpServer* other);
  friend void swap(XmsgImAuthCfgXscUdpServer& a, XmsgImAuthCfgXscUdpServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImAuthCfgXscUdpServer* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImAuthCfgXscUdpServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImAuthCfgXscUdpServer& from);
  void MergeFrom(const XmsgImAuthCfgXscUdpServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImAuthCfgXscUdpServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // @@protoc_insertion_point(class_scope:XmsgImAuthCfgXscUdpServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscUdpServerImpl();
};
// -------------------------------------------------------------------

class XmsgImAuthCfgXscRudpServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImAuthCfgXscRudpServer) */ {
 public:
  XmsgImAuthCfgXscRudpServer();
  virtual ~XmsgImAuthCfgXscRudpServer();

  XmsgImAuthCfgXscRudpServer(const XmsgImAuthCfgXscRudpServer& from);

  inline XmsgImAuthCfgXscRudpServer& operator=(const XmsgImAuthCfgXscRudpServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImAuthCfgXscRudpServer(XmsgImAuthCfgXscRudpServer&& from) noexcept
    : XmsgImAuthCfgXscRudpServer() {
    *this = ::std::move(from);
  }

  inline XmsgImAuthCfgXscRudpServer& operator=(XmsgImAuthCfgXscRudpServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImAuthCfgXscRudpServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImAuthCfgXscRudpServer* internal_default_instance() {
    return reinterpret_cast<const XmsgImAuthCfgXscRudpServer*>(
               &_XmsgImAuthCfgXscRudpServer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(XmsgImAuthCfgXscRudpServer* other);
  friend void swap(XmsgImAuthCfgXscRudpServer& a, XmsgImAuthCfgXscRudpServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImAuthCfgXscRudpServer* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImAuthCfgXscRudpServer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImAuthCfgXscRudpServer& from);
  void MergeFrom(const XmsgImAuthCfgXscRudpServer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImAuthCfgXscRudpServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // @@protoc_insertion_point(class_scope:XmsgImAuthCfgXscRudpServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscRudpServerImpl();
};
// -------------------------------------------------------------------

class XmsgImAuthCfgXmsgNeH2nAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImAuthCfgXmsgNeH2nAddr) */ {
 public:
  XmsgImAuthCfgXmsgNeH2nAddr();
  virtual ~XmsgImAuthCfgXmsgNeH2nAddr();

  XmsgImAuthCfgXmsgNeH2nAddr(const XmsgImAuthCfgXmsgNeH2nAddr& from);

  inline XmsgImAuthCfgXmsgNeH2nAddr& operator=(const XmsgImAuthCfgXmsgNeH2nAddr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImAuthCfgXmsgNeH2nAddr(XmsgImAuthCfgXmsgNeH2nAddr&& from) noexcept
    : XmsgImAuthCfgXmsgNeH2nAddr() {
    *this = ::std::move(from);
  }

  inline XmsgImAuthCfgXmsgNeH2nAddr& operator=(XmsgImAuthCfgXmsgNeH2nAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImAuthCfgXmsgNeH2nAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImAuthCfgXmsgNeH2nAddr* internal_default_instance() {
    return reinterpret_cast<const XmsgImAuthCfgXmsgNeH2nAddr*>(
               &_XmsgImAuthCfgXmsgNeH2nAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(XmsgImAuthCfgXmsgNeH2nAddr* other);
  friend void swap(XmsgImAuthCfgXmsgNeH2nAddr& a, XmsgImAuthCfgXmsgNeH2nAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImAuthCfgXmsgNeH2nAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImAuthCfgXmsgNeH2nAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImAuthCfgXmsgNeH2nAddr& from);
  void MergeFrom(const XmsgImAuthCfgXmsgNeH2nAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImAuthCfgXmsgNeH2nAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string neg = 1;
  void clear_neg();
  static const int kNegFieldNumber = 1;
  const ::std::string& neg() const;
  void set_neg(const ::std::string& value);
  #if LANG_CXX11
  void set_neg(::std::string&& value);
  #endif
  void set_neg(const char* value);
  void set_neg(const char* value, size_t size);
  ::std::string* mutable_neg();
  ::std::string* release_neg();
  void set_allocated_neg(::std::string* neg);

  // string addr = 2;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string alg = 4;
  void clear_alg();
  static const int kAlgFieldNumber = 4;
  const ::std::string& alg() const;
  void set_alg(const ::std::string& value);
  #if LANG_CXX11
  void set_alg(::std::string&& value);
  #endif
  void set_alg(const char* value);
  void set_alg(const char* value, size_t size);
  ::std::string* mutable_alg();
  ::std::string* release_alg();
  void set_allocated_alg(::std::string* alg);

  // uint32 redundant = 5;
  void clear_redundant();
  static const int kRedundantFieldNumber = 5;
  ::google::protobuf::uint32 redundant() const;
  void set_redundant(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImAuthCfgXmsgNeH2nAddr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr neg_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr alg_;
  ::google::protobuf::uint32 redundant_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXmsgNeH2nAddrImpl();
};
// -------------------------------------------------------------------

class XmsgImAuthCfgXmsgNeN2hAddr : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImAuthCfgXmsgNeN2hAddr) */ {
 public:
  XmsgImAuthCfgXmsgNeN2hAddr();
  virtual ~XmsgImAuthCfgXmsgNeN2hAddr();

  XmsgImAuthCfgXmsgNeN2hAddr(const XmsgImAuthCfgXmsgNeN2hAddr& from);

  inline XmsgImAuthCfgXmsgNeN2hAddr& operator=(const XmsgImAuthCfgXmsgNeN2hAddr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImAuthCfgXmsgNeN2hAddr(XmsgImAuthCfgXmsgNeN2hAddr&& from) noexcept
    : XmsgImAuthCfgXmsgNeN2hAddr() {
    *this = ::std::move(from);
  }

  inline XmsgImAuthCfgXmsgNeN2hAddr& operator=(XmsgImAuthCfgXmsgNeN2hAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImAuthCfgXmsgNeN2hAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImAuthCfgXmsgNeN2hAddr* internal_default_instance() {
    return reinterpret_cast<const XmsgImAuthCfgXmsgNeN2hAddr*>(
               &_XmsgImAuthCfgXmsgNeN2hAddr_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(XmsgImAuthCfgXmsgNeN2hAddr* other);
  friend void swap(XmsgImAuthCfgXmsgNeN2hAddr& a, XmsgImAuthCfgXmsgNeN2hAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImAuthCfgXmsgNeN2hAddr* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImAuthCfgXmsgNeN2hAddr* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImAuthCfgXmsgNeN2hAddr& from);
  void MergeFrom(const XmsgImAuthCfgXmsgNeN2hAddr& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImAuthCfgXmsgNeN2hAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string neg = 1;
  void clear_neg();
  static const int kNegFieldNumber = 1;
  const ::std::string& neg() const;
  void set_neg(const ::std::string& value);
  #if LANG_CXX11
  void set_neg(::std::string&& value);
  #endif
  void set_neg(const char* value);
  void set_neg(const char* value, size_t size);
  ::std::string* mutable_neg();
  ::std::string* release_neg();
  void set_allocated_neg(::std::string* neg);

  // string cgt = 2;
  void clear_cgt();
  static const int kCgtFieldNumber = 2;
  const ::std::string& cgt() const;
  void set_cgt(const ::std::string& value);
  #if LANG_CXX11
  void set_cgt(::std::string&& value);
  #endif
  void set_cgt(const char* value);
  void set_cgt(const char* value, size_t size);
  ::std::string* mutable_cgt();
  ::std::string* release_cgt();
  void set_allocated_cgt(::std::string* cgt);

  // string pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const char* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // string addr = 4;
  void clear_addr();
  static const int kAddrFieldNumber = 4;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // @@protoc_insertion_point(class_scope:XmsgImAuthCfgXmsgNeN2hAddr)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr neg_;
  ::google::protobuf::internal::ArenaStringPtr cgt_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXmsgNeN2hAddrImpl();
};
// -------------------------------------------------------------------

class XmsgImAuthPubService : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImAuthPubService) */ {
 public:
  XmsgImAuthPubService();
  virtual ~XmsgImAuthPubService();

  XmsgImAuthPubService(const XmsgImAuthPubService& from);

  inline XmsgImAuthPubService& operator=(const XmsgImAuthPubService& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImAuthPubService(XmsgImAuthPubService&& from) noexcept
    : XmsgImAuthPubService() {
    *this = ::std::move(from);
  }

  inline XmsgImAuthPubService& operator=(XmsgImAuthPubService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImAuthPubService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImAuthPubService* internal_default_instance() {
    return reinterpret_cast<const XmsgImAuthPubService*>(
               &_XmsgImAuthPubService_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(XmsgImAuthPubService* other);
  friend void swap(XmsgImAuthPubService& a, XmsgImAuthPubService& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImAuthPubService* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImAuthPubService* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImAuthPubService& from);
  void MergeFrom(const XmsgImAuthPubService& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImAuthPubService* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .XmsgImAuthPubServiceAddress addr = 2;
  int addr_size() const;
  void clear_addr();
  static const int kAddrFieldNumber = 2;
  const ::XmsgImAuthPubServiceAddress& addr(int index) const;
  ::XmsgImAuthPubServiceAddress* mutable_addr(int index);
  ::XmsgImAuthPubServiceAddress* add_addr();
  ::google::protobuf::RepeatedPtrField< ::XmsgImAuthPubServiceAddress >*
      mutable_addr();
  const ::google::protobuf::RepeatedPtrField< ::XmsgImAuthPubServiceAddress >&
      addr() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:XmsgImAuthPubService)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::XmsgImAuthPubServiceAddress > addr_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthPubServiceImpl();
};
// -------------------------------------------------------------------

class XmsgImAuthPubServiceAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImAuthPubServiceAddress) */ {
 public:
  XmsgImAuthPubServiceAddress();
  virtual ~XmsgImAuthPubServiceAddress();

  XmsgImAuthPubServiceAddress(const XmsgImAuthPubServiceAddress& from);

  inline XmsgImAuthPubServiceAddress& operator=(const XmsgImAuthPubServiceAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImAuthPubServiceAddress(XmsgImAuthPubServiceAddress&& from) noexcept
    : XmsgImAuthPubServiceAddress() {
    *this = ::std::move(from);
  }

  inline XmsgImAuthPubServiceAddress& operator=(XmsgImAuthPubServiceAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImAuthPubServiceAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImAuthPubServiceAddress* internal_default_instance() {
    return reinterpret_cast<const XmsgImAuthPubServiceAddress*>(
               &_XmsgImAuthPubServiceAddress_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(XmsgImAuthPubServiceAddress* other);
  friend void swap(XmsgImAuthPubServiceAddress& a, XmsgImAuthPubServiceAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImAuthPubServiceAddress* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImAuthPubServiceAddress* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImAuthPubServiceAddress& from);
  void MergeFrom(const XmsgImAuthPubServiceAddress& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImAuthPubServiceAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string host = 1;
  void clear_host();
  static const int kHostFieldNumber = 1;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // string proto = 2;
  void clear_proto();
  static const int kProtoFieldNumber = 2;
  const ::std::string& proto() const;
  void set_proto(const ::std::string& value);
  #if LANG_CXX11
  void set_proto(::std::string&& value);
  #endif
  void set_proto(const char* value);
  void set_proto(const char* value, size_t size);
  ::std::string* mutable_proto();
  ::std::string* release_proto();
  void set_allocated_proto(::std::string* proto);

  // @@protoc_insertion_point(class_scope:XmsgImAuthPubServiceAddress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::internal::ArenaStringPtr proto_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthPubServiceAddressImpl();
};
// -------------------------------------------------------------------

class XmsgImAuthCfgMisc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:XmsgImAuthCfgMisc) */ {
 public:
  XmsgImAuthCfgMisc();
  virtual ~XmsgImAuthCfgMisc();

  XmsgImAuthCfgMisc(const XmsgImAuthCfgMisc& from);

  inline XmsgImAuthCfgMisc& operator=(const XmsgImAuthCfgMisc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XmsgImAuthCfgMisc(XmsgImAuthCfgMisc&& from) noexcept
    : XmsgImAuthCfgMisc() {
    *this = ::std::move(from);
  }

  inline XmsgImAuthCfgMisc& operator=(XmsgImAuthCfgMisc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const XmsgImAuthCfgMisc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XmsgImAuthCfgMisc* internal_default_instance() {
    return reinterpret_cast<const XmsgImAuthCfgMisc*>(
               &_XmsgImAuthCfgMisc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(XmsgImAuthCfgMisc* other);
  friend void swap(XmsgImAuthCfgMisc& a, XmsgImAuthCfgMisc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XmsgImAuthCfgMisc* New() const PROTOBUF_FINAL { return New(NULL); }

  XmsgImAuthCfgMisc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const XmsgImAuthCfgMisc& from);
  void MergeFrom(const XmsgImAuthCfgMisc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(XmsgImAuthCfgMisc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool registeEnable = 3;
  void clear_registeenable();
  static const int kRegisteEnableFieldNumber = 3;
  bool registeenable() const;
  void set_registeenable(bool value);

  // uint32 tokenExpiredSeconds = 4;
  void clear_tokenexpiredseconds();
  static const int kTokenExpiredSecondsFieldNumber = 4;
  ::google::protobuf::uint32 tokenexpiredseconds() const;
  void set_tokenexpiredseconds(::google::protobuf::uint32 value);

  // uint32 tokenSaveBatchSize = 5;
  void clear_tokensavebatchsize();
  static const int kTokenSaveBatchSizeFieldNumber = 5;
  ::google::protobuf::uint32 tokensavebatchsize() const;
  void set_tokensavebatchsize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:XmsgImAuthCfgMisc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool registeenable_;
  ::google::protobuf::uint32 tokenexpiredseconds_;
  ::google::protobuf::uint32 tokensavebatchsize_;
  mutable int _cached_size_;
  friend struct ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::TableStruct;
  friend void ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgMiscImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// XmsgImAuthCfgPb

// string cgt = 1;
inline void XmsgImAuthCfgPb::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgPb::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgPb.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgImAuthCfgPb::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgPb.cgt)
}
#if LANG_CXX11
inline void XmsgImAuthCfgPb::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgPb.cgt)
}
#endif
inline void XmsgImAuthCfgPb::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgPb.cgt)
}
inline void XmsgImAuthCfgPb::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgPb.cgt)
}
inline ::std::string* XmsgImAuthCfgPb::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgPb.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgPb::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgPb.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgPb::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgPb.cgt)
}

// string cfgType = 2;
inline void XmsgImAuthCfgPb::clear_cfgtype() {
  cfgtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgPb::cfgtype() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgPb.cfgType)
  return cfgtype_.GetNoArena();
}
inline void XmsgImAuthCfgPb::set_cfgtype(const ::std::string& value) {
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgPb.cfgType)
}
#if LANG_CXX11
inline void XmsgImAuthCfgPb::set_cfgtype(::std::string&& value) {
  
  cfgtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgPb.cfgType)
}
#endif
inline void XmsgImAuthCfgPb::set_cfgtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgPb.cfgType)
}
inline void XmsgImAuthCfgPb::set_cfgtype(const char* value, size_t size) {
  
  cfgtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgPb.cfgType)
}
inline ::std::string* XmsgImAuthCfgPb::mutable_cfgtype() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgPb.cfgType)
  return cfgtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgPb::release_cfgtype() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgPb.cfgType)
  
  return cfgtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgPb::set_allocated_cfgtype(::std::string* cfgtype) {
  if (cfgtype != NULL) {
    
  } else {
    
  }
  cfgtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cfgtype);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgPb.cfgType)
}

// .XmsgImAuthCfgMongodb mongodb = 3;
inline bool XmsgImAuthCfgPb::has_mongodb() const {
  return this != internal_default_instance() && mongodb_ != NULL;
}
inline void XmsgImAuthCfgPb::clear_mongodb() {
  if (GetArenaNoVirtual() == NULL && mongodb_ != NULL) {
    delete mongodb_;
  }
  mongodb_ = NULL;
}
inline const ::XmsgImAuthCfgMongodb& XmsgImAuthCfgPb::mongodb() const {
  const ::XmsgImAuthCfgMongodb* p = mongodb_;
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgPb.mongodb)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImAuthCfgMongodb*>(
      &::_XmsgImAuthCfgMongodb_default_instance_);
}
inline ::XmsgImAuthCfgMongodb* XmsgImAuthCfgPb::release_mongodb() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgPb.mongodb)
  
  ::XmsgImAuthCfgMongodb* temp = mongodb_;
  mongodb_ = NULL;
  return temp;
}
inline ::XmsgImAuthCfgMongodb* XmsgImAuthCfgPb::mutable_mongodb() {
  
  if (mongodb_ == NULL) {
    mongodb_ = new ::XmsgImAuthCfgMongodb;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgPb.mongodb)
  return mongodb_;
}
inline void XmsgImAuthCfgPb::set_allocated_mongodb(::XmsgImAuthCfgMongodb* mongodb) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mongodb_;
  }
  if (mongodb) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mongodb = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mongodb, submessage_arena);
    }
    
  } else {
    
  }
  mongodb_ = mongodb;
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgPb.mongodb)
}

// .XmsgImAuthCfgMysql mysql = 4;
inline bool XmsgImAuthCfgPb::has_mysql() const {
  return this != internal_default_instance() && mysql_ != NULL;
}
inline void XmsgImAuthCfgPb::clear_mysql() {
  if (GetArenaNoVirtual() == NULL && mysql_ != NULL) {
    delete mysql_;
  }
  mysql_ = NULL;
}
inline const ::XmsgImAuthCfgMysql& XmsgImAuthCfgPb::mysql() const {
  const ::XmsgImAuthCfgMysql* p = mysql_;
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgPb.mysql)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImAuthCfgMysql*>(
      &::_XmsgImAuthCfgMysql_default_instance_);
}
inline ::XmsgImAuthCfgMysql* XmsgImAuthCfgPb::release_mysql() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgPb.mysql)
  
  ::XmsgImAuthCfgMysql* temp = mysql_;
  mysql_ = NULL;
  return temp;
}
inline ::XmsgImAuthCfgMysql* XmsgImAuthCfgPb::mutable_mysql() {
  
  if (mysql_ == NULL) {
    mysql_ = new ::XmsgImAuthCfgMysql;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgPb.mysql)
  return mysql_;
}
inline void XmsgImAuthCfgPb::set_allocated_mysql(::XmsgImAuthCfgMysql* mysql) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mysql_;
  }
  if (mysql) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mysql = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mysql, submessage_arena);
    }
    
  } else {
    
  }
  mysql_ = mysql;
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgPb.mysql)
}

// .XmsgImAuthCfgLog log = 5;
inline bool XmsgImAuthCfgPb::has_log() const {
  return this != internal_default_instance() && log_ != NULL;
}
inline void XmsgImAuthCfgPb::clear_log() {
  if (GetArenaNoVirtual() == NULL && log_ != NULL) {
    delete log_;
  }
  log_ = NULL;
}
inline const ::XmsgImAuthCfgLog& XmsgImAuthCfgPb::log() const {
  const ::XmsgImAuthCfgLog* p = log_;
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgPb.log)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImAuthCfgLog*>(
      &::_XmsgImAuthCfgLog_default_instance_);
}
inline ::XmsgImAuthCfgLog* XmsgImAuthCfgPb::release_log() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgPb.log)
  
  ::XmsgImAuthCfgLog* temp = log_;
  log_ = NULL;
  return temp;
}
inline ::XmsgImAuthCfgLog* XmsgImAuthCfgPb::mutable_log() {
  
  if (log_ == NULL) {
    log_ = new ::XmsgImAuthCfgLog;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgPb.log)
  return log_;
}
inline void XmsgImAuthCfgPb::set_allocated_log(::XmsgImAuthCfgLog* log) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete log_;
  }
  if (log) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      log = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, log, submessage_arena);
    }
    
  } else {
    
  }
  log_ = log;
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgPb.log)
}

// .XmsgImAuthCfgXscTcpServer pubTcp = 6;
inline bool XmsgImAuthCfgPb::has_pubtcp() const {
  return this != internal_default_instance() && pubtcp_ != NULL;
}
inline void XmsgImAuthCfgPb::clear_pubtcp() {
  if (GetArenaNoVirtual() == NULL && pubtcp_ != NULL) {
    delete pubtcp_;
  }
  pubtcp_ = NULL;
}
inline const ::XmsgImAuthCfgXscTcpServer& XmsgImAuthCfgPb::pubtcp() const {
  const ::XmsgImAuthCfgXscTcpServer* p = pubtcp_;
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgPb.pubTcp)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImAuthCfgXscTcpServer*>(
      &::_XmsgImAuthCfgXscTcpServer_default_instance_);
}
inline ::XmsgImAuthCfgXscTcpServer* XmsgImAuthCfgPb::release_pubtcp() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgPb.pubTcp)
  
  ::XmsgImAuthCfgXscTcpServer* temp = pubtcp_;
  pubtcp_ = NULL;
  return temp;
}
inline ::XmsgImAuthCfgXscTcpServer* XmsgImAuthCfgPb::mutable_pubtcp() {
  
  if (pubtcp_ == NULL) {
    pubtcp_ = new ::XmsgImAuthCfgXscTcpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgPb.pubTcp)
  return pubtcp_;
}
inline void XmsgImAuthCfgPb::set_allocated_pubtcp(::XmsgImAuthCfgXscTcpServer* pubtcp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pubtcp_;
  }
  if (pubtcp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pubtcp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pubtcp, submessage_arena);
    }
    
  } else {
    
  }
  pubtcp_ = pubtcp;
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgPb.pubTcp)
}

// .XmsgImAuthCfgXscHttpServer pubHttp = 7;
inline bool XmsgImAuthCfgPb::has_pubhttp() const {
  return this != internal_default_instance() && pubhttp_ != NULL;
}
inline void XmsgImAuthCfgPb::clear_pubhttp() {
  if (GetArenaNoVirtual() == NULL && pubhttp_ != NULL) {
    delete pubhttp_;
  }
  pubhttp_ = NULL;
}
inline const ::XmsgImAuthCfgXscHttpServer& XmsgImAuthCfgPb::pubhttp() const {
  const ::XmsgImAuthCfgXscHttpServer* p = pubhttp_;
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgPb.pubHttp)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImAuthCfgXscHttpServer*>(
      &::_XmsgImAuthCfgXscHttpServer_default_instance_);
}
inline ::XmsgImAuthCfgXscHttpServer* XmsgImAuthCfgPb::release_pubhttp() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgPb.pubHttp)
  
  ::XmsgImAuthCfgXscHttpServer* temp = pubhttp_;
  pubhttp_ = NULL;
  return temp;
}
inline ::XmsgImAuthCfgXscHttpServer* XmsgImAuthCfgPb::mutable_pubhttp() {
  
  if (pubhttp_ == NULL) {
    pubhttp_ = new ::XmsgImAuthCfgXscHttpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgPb.pubHttp)
  return pubhttp_;
}
inline void XmsgImAuthCfgPb::set_allocated_pubhttp(::XmsgImAuthCfgXscHttpServer* pubhttp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pubhttp_;
  }
  if (pubhttp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pubhttp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pubhttp, submessage_arena);
    }
    
  } else {
    
  }
  pubhttp_ = pubhttp;
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgPb.pubHttp)
}

// .XmsgImAuthCfgXscWebSocketServer pubWebSocket = 8;
inline bool XmsgImAuthCfgPb::has_pubwebsocket() const {
  return this != internal_default_instance() && pubwebsocket_ != NULL;
}
inline void XmsgImAuthCfgPb::clear_pubwebsocket() {
  if (GetArenaNoVirtual() == NULL && pubwebsocket_ != NULL) {
    delete pubwebsocket_;
  }
  pubwebsocket_ = NULL;
}
inline const ::XmsgImAuthCfgXscWebSocketServer& XmsgImAuthCfgPb::pubwebsocket() const {
  const ::XmsgImAuthCfgXscWebSocketServer* p = pubwebsocket_;
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgPb.pubWebSocket)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImAuthCfgXscWebSocketServer*>(
      &::_XmsgImAuthCfgXscWebSocketServer_default_instance_);
}
inline ::XmsgImAuthCfgXscWebSocketServer* XmsgImAuthCfgPb::release_pubwebsocket() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgPb.pubWebSocket)
  
  ::XmsgImAuthCfgXscWebSocketServer* temp = pubwebsocket_;
  pubwebsocket_ = NULL;
  return temp;
}
inline ::XmsgImAuthCfgXscWebSocketServer* XmsgImAuthCfgPb::mutable_pubwebsocket() {
  
  if (pubwebsocket_ == NULL) {
    pubwebsocket_ = new ::XmsgImAuthCfgXscWebSocketServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgPb.pubWebSocket)
  return pubwebsocket_;
}
inline void XmsgImAuthCfgPb::set_allocated_pubwebsocket(::XmsgImAuthCfgXscWebSocketServer* pubwebsocket) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pubwebsocket_;
  }
  if (pubwebsocket) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pubwebsocket = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pubwebsocket, submessage_arena);
    }
    
  } else {
    
  }
  pubwebsocket_ = pubwebsocket;
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgPb.pubWebSocket)
}

// .XmsgImAuthCfgXscUdpServer pubUdp = 9;
inline bool XmsgImAuthCfgPb::has_pubudp() const {
  return this != internal_default_instance() && pubudp_ != NULL;
}
inline void XmsgImAuthCfgPb::clear_pubudp() {
  if (GetArenaNoVirtual() == NULL && pubudp_ != NULL) {
    delete pubudp_;
  }
  pubudp_ = NULL;
}
inline const ::XmsgImAuthCfgXscUdpServer& XmsgImAuthCfgPb::pubudp() const {
  const ::XmsgImAuthCfgXscUdpServer* p = pubudp_;
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgPb.pubUdp)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImAuthCfgXscUdpServer*>(
      &::_XmsgImAuthCfgXscUdpServer_default_instance_);
}
inline ::XmsgImAuthCfgXscUdpServer* XmsgImAuthCfgPb::release_pubudp() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgPb.pubUdp)
  
  ::XmsgImAuthCfgXscUdpServer* temp = pubudp_;
  pubudp_ = NULL;
  return temp;
}
inline ::XmsgImAuthCfgXscUdpServer* XmsgImAuthCfgPb::mutable_pubudp() {
  
  if (pubudp_ == NULL) {
    pubudp_ = new ::XmsgImAuthCfgXscUdpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgPb.pubUdp)
  return pubudp_;
}
inline void XmsgImAuthCfgPb::set_allocated_pubudp(::XmsgImAuthCfgXscUdpServer* pubudp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pubudp_;
  }
  if (pubudp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pubudp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pubudp, submessage_arena);
    }
    
  } else {
    
  }
  pubudp_ = pubudp;
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgPb.pubUdp)
}

// .XmsgImAuthCfgXscRudpServer pubRudp = 10;
inline bool XmsgImAuthCfgPb::has_pubrudp() const {
  return this != internal_default_instance() && pubrudp_ != NULL;
}
inline void XmsgImAuthCfgPb::clear_pubrudp() {
  if (GetArenaNoVirtual() == NULL && pubrudp_ != NULL) {
    delete pubrudp_;
  }
  pubrudp_ = NULL;
}
inline const ::XmsgImAuthCfgXscRudpServer& XmsgImAuthCfgPb::pubrudp() const {
  const ::XmsgImAuthCfgXscRudpServer* p = pubrudp_;
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgPb.pubRudp)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImAuthCfgXscRudpServer*>(
      &::_XmsgImAuthCfgXscRudpServer_default_instance_);
}
inline ::XmsgImAuthCfgXscRudpServer* XmsgImAuthCfgPb::release_pubrudp() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgPb.pubRudp)
  
  ::XmsgImAuthCfgXscRudpServer* temp = pubrudp_;
  pubrudp_ = NULL;
  return temp;
}
inline ::XmsgImAuthCfgXscRudpServer* XmsgImAuthCfgPb::mutable_pubrudp() {
  
  if (pubrudp_ == NULL) {
    pubrudp_ = new ::XmsgImAuthCfgXscRudpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgPb.pubRudp)
  return pubrudp_;
}
inline void XmsgImAuthCfgPb::set_allocated_pubrudp(::XmsgImAuthCfgXscRudpServer* pubrudp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pubrudp_;
  }
  if (pubrudp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pubrudp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pubrudp, submessage_arena);
    }
    
  } else {
    
  }
  pubrudp_ = pubrudp;
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgPb.pubRudp)
}

// .XmsgImAuthCfgXscTcpServer priTcp = 11;
inline bool XmsgImAuthCfgPb::has_pritcp() const {
  return this != internal_default_instance() && pritcp_ != NULL;
}
inline void XmsgImAuthCfgPb::clear_pritcp() {
  if (GetArenaNoVirtual() == NULL && pritcp_ != NULL) {
    delete pritcp_;
  }
  pritcp_ = NULL;
}
inline const ::XmsgImAuthCfgXscTcpServer& XmsgImAuthCfgPb::pritcp() const {
  const ::XmsgImAuthCfgXscTcpServer* p = pritcp_;
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgPb.priTcp)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImAuthCfgXscTcpServer*>(
      &::_XmsgImAuthCfgXscTcpServer_default_instance_);
}
inline ::XmsgImAuthCfgXscTcpServer* XmsgImAuthCfgPb::release_pritcp() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgPb.priTcp)
  
  ::XmsgImAuthCfgXscTcpServer* temp = pritcp_;
  pritcp_ = NULL;
  return temp;
}
inline ::XmsgImAuthCfgXscTcpServer* XmsgImAuthCfgPb::mutable_pritcp() {
  
  if (pritcp_ == NULL) {
    pritcp_ = new ::XmsgImAuthCfgXscTcpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgPb.priTcp)
  return pritcp_;
}
inline void XmsgImAuthCfgPb::set_allocated_pritcp(::XmsgImAuthCfgXscTcpServer* pritcp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pritcp_;
  }
  if (pritcp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pritcp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pritcp, submessage_arena);
    }
    
  } else {
    
  }
  pritcp_ = pritcp;
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgPb.priTcp)
}

// repeated .XmsgImAuthCfgXmsgNeH2nAddr h2n = 12;
inline int XmsgImAuthCfgPb::h2n_size() const {
  return h2n_.size();
}
inline void XmsgImAuthCfgPb::clear_h2n() {
  h2n_.Clear();
}
inline const ::XmsgImAuthCfgXmsgNeH2nAddr& XmsgImAuthCfgPb::h2n(int index) const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgPb.h2n)
  return h2n_.Get(index);
}
inline ::XmsgImAuthCfgXmsgNeH2nAddr* XmsgImAuthCfgPb::mutable_h2n(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgPb.h2n)
  return h2n_.Mutable(index);
}
inline ::XmsgImAuthCfgXmsgNeH2nAddr* XmsgImAuthCfgPb::add_h2n() {
  // @@protoc_insertion_point(field_add:XmsgImAuthCfgPb.h2n)
  return h2n_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgImAuthCfgXmsgNeH2nAddr >*
XmsgImAuthCfgPb::mutable_h2n() {
  // @@protoc_insertion_point(field_mutable_list:XmsgImAuthCfgPb.h2n)
  return &h2n_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgImAuthCfgXmsgNeH2nAddr >&
XmsgImAuthCfgPb::h2n() const {
  // @@protoc_insertion_point(field_list:XmsgImAuthCfgPb.h2n)
  return h2n_;
}

// repeated .XmsgImAuthCfgXmsgNeN2hAddr n2h = 13;
inline int XmsgImAuthCfgPb::n2h_size() const {
  return n2h_.size();
}
inline void XmsgImAuthCfgPb::clear_n2h() {
  n2h_.Clear();
}
inline const ::XmsgImAuthCfgXmsgNeN2hAddr& XmsgImAuthCfgPb::n2h(int index) const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgPb.n2h)
  return n2h_.Get(index);
}
inline ::XmsgImAuthCfgXmsgNeN2hAddr* XmsgImAuthCfgPb::mutable_n2h(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgPb.n2h)
  return n2h_.Mutable(index);
}
inline ::XmsgImAuthCfgXmsgNeN2hAddr* XmsgImAuthCfgPb::add_n2h() {
  // @@protoc_insertion_point(field_add:XmsgImAuthCfgPb.n2h)
  return n2h_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgImAuthCfgXmsgNeN2hAddr >*
XmsgImAuthCfgPb::mutable_n2h() {
  // @@protoc_insertion_point(field_mutable_list:XmsgImAuthCfgPb.n2h)
  return &n2h_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgImAuthCfgXmsgNeN2hAddr >&
XmsgImAuthCfgPb::n2h() const {
  // @@protoc_insertion_point(field_list:XmsgImAuthCfgPb.n2h)
  return n2h_;
}

// map<string, .XmsgImAuthPubService> xmsgApServiceAddr = 18;
inline int XmsgImAuthCfgPb::xmsgapserviceaddr_size() const {
  return xmsgapserviceaddr_.size();
}
inline void XmsgImAuthCfgPb::clear_xmsgapserviceaddr() {
  xmsgapserviceaddr_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >&
XmsgImAuthCfgPb::xmsgapserviceaddr() const {
  // @@protoc_insertion_point(field_map:XmsgImAuthCfgPb.xmsgApServiceAddr)
  return xmsgapserviceaddr_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >*
XmsgImAuthCfgPb::mutable_xmsgapserviceaddr() {
  // @@protoc_insertion_point(field_mutable_map:XmsgImAuthCfgPb.xmsgApServiceAddr)
  return xmsgapserviceaddr_.MutableMap();
}

// map<string, .XmsgImAuthPubService> xmsgOssServiceAddr = 19;
inline int XmsgImAuthCfgPb::xmsgossserviceaddr_size() const {
  return xmsgossserviceaddr_.size();
}
inline void XmsgImAuthCfgPb::clear_xmsgossserviceaddr() {
  xmsgossserviceaddr_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >&
XmsgImAuthCfgPb::xmsgossserviceaddr() const {
  // @@protoc_insertion_point(field_map:XmsgImAuthCfgPb.xmsgOssServiceAddr)
  return xmsgossserviceaddr_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >*
XmsgImAuthCfgPb::mutable_xmsgossserviceaddr() {
  // @@protoc_insertion_point(field_mutable_map:XmsgImAuthCfgPb.xmsgOssServiceAddr)
  return xmsgossserviceaddr_.MutableMap();
}

// .XmsgImAuthCfgMisc misc = 14;
inline bool XmsgImAuthCfgPb::has_misc() const {
  return this != internal_default_instance() && misc_ != NULL;
}
inline void XmsgImAuthCfgPb::clear_misc() {
  if (GetArenaNoVirtual() == NULL && misc_ != NULL) {
    delete misc_;
  }
  misc_ = NULL;
}
inline const ::XmsgImAuthCfgMisc& XmsgImAuthCfgPb::misc() const {
  const ::XmsgImAuthCfgMisc* p = misc_;
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgPb.misc)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImAuthCfgMisc*>(
      &::_XmsgImAuthCfgMisc_default_instance_);
}
inline ::XmsgImAuthCfgMisc* XmsgImAuthCfgPb::release_misc() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgPb.misc)
  
  ::XmsgImAuthCfgMisc* temp = misc_;
  misc_ = NULL;
  return temp;
}
inline ::XmsgImAuthCfgMisc* XmsgImAuthCfgPb::mutable_misc() {
  
  if (misc_ == NULL) {
    misc_ = new ::XmsgImAuthCfgMisc;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgPb.misc)
  return misc_;
}
inline void XmsgImAuthCfgPb::set_allocated_misc(::XmsgImAuthCfgMisc* misc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete misc_;
  }
  if (misc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      misc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, misc, submessage_arena);
    }
    
  } else {
    
  }
  misc_ = misc;
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgPb.misc)
}

// map<string, string> kafkaProd = 15;
inline int XmsgImAuthCfgPb::kafkaprod_size() const {
  return kafkaprod_.size();
}
inline void XmsgImAuthCfgPb::clear_kafkaprod() {
  kafkaprod_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
XmsgImAuthCfgPb::kafkaprod() const {
  // @@protoc_insertion_point(field_map:XmsgImAuthCfgPb.kafkaProd)
  return kafkaprod_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
XmsgImAuthCfgPb::mutable_kafkaprod() {
  // @@protoc_insertion_point(field_mutable_map:XmsgImAuthCfgPb.kafkaProd)
  return kafkaprod_.MutableMap();
}

// uint64 gts = 16;
inline void XmsgImAuthCfgPb::clear_gts() {
  gts_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 XmsgImAuthCfgPb::gts() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgPb.gts)
  return gts_;
}
inline void XmsgImAuthCfgPb::set_gts(::google::protobuf::uint64 value) {
  
  gts_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgPb.gts)
}

// uint64 uts = 17;
inline void XmsgImAuthCfgPb::clear_uts() {
  uts_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 XmsgImAuthCfgPb::uts() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgPb.uts)
  return uts_;
}
inline void XmsgImAuthCfgPb::set_uts(::google::protobuf::uint64 value) {
  
  uts_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgPb.uts)
}

// -------------------------------------------------------------------

// XmsgImAuthCfgMongodb

// string uri = 1;
inline void XmsgImAuthCfgMongodb::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgMongodb::uri() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgMongodb.uri)
  return uri_.GetNoArena();
}
inline void XmsgImAuthCfgMongodb::set_uri(const ::std::string& value) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgMongodb.uri)
}
#if LANG_CXX11
inline void XmsgImAuthCfgMongodb::set_uri(::std::string&& value) {
  
  uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgMongodb.uri)
}
#endif
inline void XmsgImAuthCfgMongodb::set_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgMongodb.uri)
}
inline void XmsgImAuthCfgMongodb::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgMongodb.uri)
}
inline ::std::string* XmsgImAuthCfgMongodb::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgMongodb.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgMongodb::release_uri() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgMongodb.uri)
  
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgMongodb::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgMongodb.uri)
}

// -------------------------------------------------------------------

// XmsgImAuthCfgMysql

// string host = 1;
inline void XmsgImAuthCfgMysql::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgMysql::host() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgMysql.host)
  return host_.GetNoArena();
}
inline void XmsgImAuthCfgMysql::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgMysql.host)
}
#if LANG_CXX11
inline void XmsgImAuthCfgMysql::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgMysql.host)
}
#endif
inline void XmsgImAuthCfgMysql::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgMysql.host)
}
inline void XmsgImAuthCfgMysql::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgMysql.host)
}
inline ::std::string* XmsgImAuthCfgMysql::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgMysql.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgMysql::release_host() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgMysql.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgMysql::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgMysql.host)
}

// uint32 port = 2;
inline void XmsgImAuthCfgMysql::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgMysql::port() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgMysql.port)
  return port_;
}
inline void XmsgImAuthCfgMysql::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgMysql.port)
}

// string db = 3;
inline void XmsgImAuthCfgMysql::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgMysql::db() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgMysql.db)
  return db_.GetNoArena();
}
inline void XmsgImAuthCfgMysql::set_db(const ::std::string& value) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgMysql.db)
}
#if LANG_CXX11
inline void XmsgImAuthCfgMysql::set_db(::std::string&& value) {
  
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgMysql.db)
}
#endif
inline void XmsgImAuthCfgMysql::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgMysql.db)
}
inline void XmsgImAuthCfgMysql::set_db(const char* value, size_t size) {
  
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgMysql.db)
}
inline ::std::string* XmsgImAuthCfgMysql::mutable_db() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgMysql.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgMysql::release_db() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgMysql.db)
  
  return db_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgMysql::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    
  } else {
    
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgMysql.db)
}

// string usr = 4;
inline void XmsgImAuthCfgMysql::clear_usr() {
  usr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgMysql::usr() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgMysql.usr)
  return usr_.GetNoArena();
}
inline void XmsgImAuthCfgMysql::set_usr(const ::std::string& value) {
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgMysql.usr)
}
#if LANG_CXX11
inline void XmsgImAuthCfgMysql::set_usr(::std::string&& value) {
  
  usr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgMysql.usr)
}
#endif
inline void XmsgImAuthCfgMysql::set_usr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgMysql.usr)
}
inline void XmsgImAuthCfgMysql::set_usr(const char* value, size_t size) {
  
  usr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgMysql.usr)
}
inline ::std::string* XmsgImAuthCfgMysql::mutable_usr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgMysql.usr)
  return usr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgMysql::release_usr() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgMysql.usr)
  
  return usr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgMysql::set_allocated_usr(::std::string* usr) {
  if (usr != NULL) {
    
  } else {
    
  }
  usr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgMysql.usr)
}

// string password = 5;
inline void XmsgImAuthCfgMysql::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgMysql::password() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgMysql.password)
  return password_.GetNoArena();
}
inline void XmsgImAuthCfgMysql::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgMysql.password)
}
#if LANG_CXX11
inline void XmsgImAuthCfgMysql::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgMysql.password)
}
#endif
inline void XmsgImAuthCfgMysql::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgMysql.password)
}
inline void XmsgImAuthCfgMysql::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgMysql.password)
}
inline ::std::string* XmsgImAuthCfgMysql::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgMysql.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgMysql::release_password() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgMysql.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgMysql::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgMysql.password)
}

// uint32 poolSize = 6;
inline void XmsgImAuthCfgMysql::clear_poolsize() {
  poolsize_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgMysql::poolsize() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgMysql.poolSize)
  return poolsize_;
}
inline void XmsgImAuthCfgMysql::set_poolsize(::google::protobuf::uint32 value) {
  
  poolsize_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgMysql.poolSize)
}

// -------------------------------------------------------------------

// XmsgImAuthCfgLog

// string level = 1;
inline void XmsgImAuthCfgLog::clear_level() {
  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgLog::level() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgLog.level)
  return level_.GetNoArena();
}
inline void XmsgImAuthCfgLog::set_level(const ::std::string& value) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgLog.level)
}
#if LANG_CXX11
inline void XmsgImAuthCfgLog::set_level(::std::string&& value) {
  
  level_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgLog.level)
}
#endif
inline void XmsgImAuthCfgLog::set_level(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgLog.level)
}
inline void XmsgImAuthCfgLog::set_level(const char* value, size_t size) {
  
  level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgLog.level)
}
inline ::std::string* XmsgImAuthCfgLog::mutable_level() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgLog.level)
  return level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgLog::release_level() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgLog.level)
  
  return level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgLog::set_allocated_level(::std::string* level) {
  if (level != NULL) {
    
  } else {
    
  }
  level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), level);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgLog.level)
}

// string output = 2;
inline void XmsgImAuthCfgLog::clear_output() {
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgLog::output() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgLog.output)
  return output_.GetNoArena();
}
inline void XmsgImAuthCfgLog::set_output(const ::std::string& value) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgLog.output)
}
#if LANG_CXX11
inline void XmsgImAuthCfgLog::set_output(::std::string&& value) {
  
  output_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgLog.output)
}
#endif
inline void XmsgImAuthCfgLog::set_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgLog.output)
}
inline void XmsgImAuthCfgLog::set_output(const char* value, size_t size) {
  
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgLog.output)
}
inline ::std::string* XmsgImAuthCfgLog::mutable_output() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgLog.output)
  return output_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgLog::release_output() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgLog.output)
  
  return output_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgLog::set_allocated_output(::std::string* output) {
  if (output != NULL) {
    
  } else {
    
  }
  output_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgLog.output)
}

// -------------------------------------------------------------------

// XmsgImAuthCfgXscTcpServer

// string addr = 1;
inline void XmsgImAuthCfgXscTcpServer::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgXscTcpServer::addr() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscTcpServer.addr)
  return addr_.GetNoArena();
}
inline void XmsgImAuthCfgXscTcpServer::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscTcpServer.addr)
}
#if LANG_CXX11
inline void XmsgImAuthCfgXscTcpServer::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgXscTcpServer.addr)
}
#endif
inline void XmsgImAuthCfgXscTcpServer::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgXscTcpServer.addr)
}
inline void XmsgImAuthCfgXscTcpServer::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgXscTcpServer.addr)
}
inline ::std::string* XmsgImAuthCfgXscTcpServer::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgXscTcpServer.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgXscTcpServer::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgXscTcpServer.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgXscTcpServer::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgXscTcpServer.addr)
}

// uint32 worker = 2;
inline void XmsgImAuthCfgXscTcpServer::clear_worker() {
  worker_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgXscTcpServer::worker() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscTcpServer.worker)
  return worker_;
}
inline void XmsgImAuthCfgXscTcpServer::set_worker(::google::protobuf::uint32 value) {
  
  worker_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscTcpServer.worker)
}

// uint32 peerLimit = 3;
inline void XmsgImAuthCfgXscTcpServer::clear_peerlimit() {
  peerlimit_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgXscTcpServer::peerlimit() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscTcpServer.peerLimit)
  return peerlimit_;
}
inline void XmsgImAuthCfgXscTcpServer::set_peerlimit(::google::protobuf::uint32 value) {
  
  peerlimit_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscTcpServer.peerLimit)
}

// uint32 peerMtu = 4;
inline void XmsgImAuthCfgXscTcpServer::clear_peermtu() {
  peermtu_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgXscTcpServer::peermtu() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscTcpServer.peerMtu)
  return peermtu_;
}
inline void XmsgImAuthCfgXscTcpServer::set_peermtu(::google::protobuf::uint32 value) {
  
  peermtu_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscTcpServer.peerMtu)
}

// uint32 peerRcvBuf = 5;
inline void XmsgImAuthCfgXscTcpServer::clear_peerrcvbuf() {
  peerrcvbuf_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgXscTcpServer::peerrcvbuf() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscTcpServer.peerRcvBuf)
  return peerrcvbuf_;
}
inline void XmsgImAuthCfgXscTcpServer::set_peerrcvbuf(::google::protobuf::uint32 value) {
  
  peerrcvbuf_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscTcpServer.peerRcvBuf)
}

// uint32 peerSndBuf = 6;
inline void XmsgImAuthCfgXscTcpServer::clear_peersndbuf() {
  peersndbuf_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgXscTcpServer::peersndbuf() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscTcpServer.peerSndBuf)
  return peersndbuf_;
}
inline void XmsgImAuthCfgXscTcpServer::set_peersndbuf(::google::protobuf::uint32 value) {
  
  peersndbuf_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscTcpServer.peerSndBuf)
}

// uint32 lazyClose = 7;
inline void XmsgImAuthCfgXscTcpServer::clear_lazyclose() {
  lazyclose_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgXscTcpServer::lazyclose() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscTcpServer.lazyClose)
  return lazyclose_;
}
inline void XmsgImAuthCfgXscTcpServer::set_lazyclose(::google::protobuf::uint32 value) {
  
  lazyclose_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscTcpServer.lazyClose)
}

// bool tracing = 8;
inline void XmsgImAuthCfgXscTcpServer::clear_tracing() {
  tracing_ = false;
}
inline bool XmsgImAuthCfgXscTcpServer::tracing() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscTcpServer.tracing)
  return tracing_;
}
inline void XmsgImAuthCfgXscTcpServer::set_tracing(bool value) {
  
  tracing_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscTcpServer.tracing)
}

// uint32 heartbeat = 9;
inline void XmsgImAuthCfgXscTcpServer::clear_heartbeat() {
  heartbeat_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgXscTcpServer::heartbeat() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscTcpServer.heartbeat)
  return heartbeat_;
}
inline void XmsgImAuthCfgXscTcpServer::set_heartbeat(::google::protobuf::uint32 value) {
  
  heartbeat_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscTcpServer.heartbeat)
}

// uint32 n2hZombie = 10;
inline void XmsgImAuthCfgXscTcpServer::clear_n2hzombie() {
  n2hzombie_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgXscTcpServer::n2hzombie() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscTcpServer.n2hZombie)
  return n2hzombie_;
}
inline void XmsgImAuthCfgXscTcpServer::set_n2hzombie(::google::protobuf::uint32 value) {
  
  n2hzombie_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscTcpServer.n2hZombie)
}

// uint32 n2hTransTimeout = 11;
inline void XmsgImAuthCfgXscTcpServer::clear_n2htranstimeout() {
  n2htranstimeout_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgXscTcpServer::n2htranstimeout() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscTcpServer.n2hTransTimeout)
  return n2htranstimeout_;
}
inline void XmsgImAuthCfgXscTcpServer::set_n2htranstimeout(::google::protobuf::uint32 value) {
  
  n2htranstimeout_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscTcpServer.n2hTransTimeout)
}

// bool n2hTracing = 12;
inline void XmsgImAuthCfgXscTcpServer::clear_n2htracing() {
  n2htracing_ = false;
}
inline bool XmsgImAuthCfgXscTcpServer::n2htracing() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscTcpServer.n2hTracing)
  return n2htracing_;
}
inline void XmsgImAuthCfgXscTcpServer::set_n2htracing(bool value) {
  
  n2htracing_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscTcpServer.n2hTracing)
}

// uint32 h2nReConn = 13;
inline void XmsgImAuthCfgXscTcpServer::clear_h2nreconn() {
  h2nreconn_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgXscTcpServer::h2nreconn() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscTcpServer.h2nReConn)
  return h2nreconn_;
}
inline void XmsgImAuthCfgXscTcpServer::set_h2nreconn(::google::protobuf::uint32 value) {
  
  h2nreconn_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscTcpServer.h2nReConn)
}

// uint32 h2nTransTimeout = 14;
inline void XmsgImAuthCfgXscTcpServer::clear_h2ntranstimeout() {
  h2ntranstimeout_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgXscTcpServer::h2ntranstimeout() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscTcpServer.h2nTransTimeout)
  return h2ntranstimeout_;
}
inline void XmsgImAuthCfgXscTcpServer::set_h2ntranstimeout(::google::protobuf::uint32 value) {
  
  h2ntranstimeout_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscTcpServer.h2nTransTimeout)
}

// -------------------------------------------------------------------

// XmsgImAuthCfgXscHttpServer

// .XmsgImAuthCfgXscTcpServer tcp = 1;
inline bool XmsgImAuthCfgXscHttpServer::has_tcp() const {
  return this != internal_default_instance() && tcp_ != NULL;
}
inline void XmsgImAuthCfgXscHttpServer::clear_tcp() {
  if (GetArenaNoVirtual() == NULL && tcp_ != NULL) {
    delete tcp_;
  }
  tcp_ = NULL;
}
inline const ::XmsgImAuthCfgXscTcpServer& XmsgImAuthCfgXscHttpServer::tcp() const {
  const ::XmsgImAuthCfgXscTcpServer* p = tcp_;
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscHttpServer.tcp)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImAuthCfgXscTcpServer*>(
      &::_XmsgImAuthCfgXscTcpServer_default_instance_);
}
inline ::XmsgImAuthCfgXscTcpServer* XmsgImAuthCfgXscHttpServer::release_tcp() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgXscHttpServer.tcp)
  
  ::XmsgImAuthCfgXscTcpServer* temp = tcp_;
  tcp_ = NULL;
  return temp;
}
inline ::XmsgImAuthCfgXscTcpServer* XmsgImAuthCfgXscHttpServer::mutable_tcp() {
  
  if (tcp_ == NULL) {
    tcp_ = new ::XmsgImAuthCfgXscTcpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgXscHttpServer.tcp)
  return tcp_;
}
inline void XmsgImAuthCfgXscHttpServer::set_allocated_tcp(::XmsgImAuthCfgXscTcpServer* tcp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tcp_;
  }
  if (tcp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tcp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tcp, submessage_arena);
    }
    
  } else {
    
  }
  tcp_ = tcp;
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgXscHttpServer.tcp)
}

// uint32 headerLimit = 2;
inline void XmsgImAuthCfgXscHttpServer::clear_headerlimit() {
  headerlimit_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgXscHttpServer::headerlimit() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscHttpServer.headerLimit)
  return headerlimit_;
}
inline void XmsgImAuthCfgXscHttpServer::set_headerlimit(::google::protobuf::uint32 value) {
  
  headerlimit_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscHttpServer.headerLimit)
}

// uint32 bodyLimit = 3;
inline void XmsgImAuthCfgXscHttpServer::clear_bodylimit() {
  bodylimit_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgXscHttpServer::bodylimit() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscHttpServer.bodyLimit)
  return bodylimit_;
}
inline void XmsgImAuthCfgXscHttpServer::set_bodylimit(::google::protobuf::uint32 value) {
  
  bodylimit_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscHttpServer.bodyLimit)
}

// uint32 closeWait = 4;
inline void XmsgImAuthCfgXscHttpServer::clear_closewait() {
  closewait_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgXscHttpServer::closewait() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscHttpServer.closeWait)
  return closewait_;
}
inline void XmsgImAuthCfgXscHttpServer::set_closewait(::google::protobuf::uint32 value) {
  
  closewait_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscHttpServer.closeWait)
}

// repeated string requiredHeader = 5;
inline int XmsgImAuthCfgXscHttpServer::requiredheader_size() const {
  return requiredheader_.size();
}
inline void XmsgImAuthCfgXscHttpServer::clear_requiredheader() {
  requiredheader_.Clear();
}
inline const ::std::string& XmsgImAuthCfgXscHttpServer::requiredheader(int index) const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscHttpServer.requiredHeader)
  return requiredheader_.Get(index);
}
inline ::std::string* XmsgImAuthCfgXscHttpServer::mutable_requiredheader(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgXscHttpServer.requiredHeader)
  return requiredheader_.Mutable(index);
}
inline void XmsgImAuthCfgXscHttpServer::set_requiredheader(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscHttpServer.requiredHeader)
  requiredheader_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void XmsgImAuthCfgXscHttpServer::set_requiredheader(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscHttpServer.requiredHeader)
  requiredheader_.Mutable(index)->assign(std::move(value));
}
#endif
inline void XmsgImAuthCfgXscHttpServer::set_requiredheader(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requiredheader_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgXscHttpServer.requiredHeader)
}
inline void XmsgImAuthCfgXscHttpServer::set_requiredheader(int index, const char* value, size_t size) {
  requiredheader_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgXscHttpServer.requiredHeader)
}
inline ::std::string* XmsgImAuthCfgXscHttpServer::add_requiredheader() {
  // @@protoc_insertion_point(field_add_mutable:XmsgImAuthCfgXscHttpServer.requiredHeader)
  return requiredheader_.Add();
}
inline void XmsgImAuthCfgXscHttpServer::add_requiredheader(const ::std::string& value) {
  requiredheader_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:XmsgImAuthCfgXscHttpServer.requiredHeader)
}
#if LANG_CXX11
inline void XmsgImAuthCfgXscHttpServer::add_requiredheader(::std::string&& value) {
  requiredheader_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:XmsgImAuthCfgXscHttpServer.requiredHeader)
}
#endif
inline void XmsgImAuthCfgXscHttpServer::add_requiredheader(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requiredheader_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:XmsgImAuthCfgXscHttpServer.requiredHeader)
}
inline void XmsgImAuthCfgXscHttpServer::add_requiredheader(const char* value, size_t size) {
  requiredheader_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:XmsgImAuthCfgXscHttpServer.requiredHeader)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
XmsgImAuthCfgXscHttpServer::requiredheader() const {
  // @@protoc_insertion_point(field_list:XmsgImAuthCfgXscHttpServer.requiredHeader)
  return requiredheader_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
XmsgImAuthCfgXscHttpServer::mutable_requiredheader() {
  // @@protoc_insertion_point(field_mutable_list:XmsgImAuthCfgXscHttpServer.requiredHeader)
  return &requiredheader_;
}

// -------------------------------------------------------------------

// XmsgImAuthCfgXscWebSocketServer

// .XmsgImAuthCfgXscTcpServer tcp = 1;
inline bool XmsgImAuthCfgXscWebSocketServer::has_tcp() const {
  return this != internal_default_instance() && tcp_ != NULL;
}
inline void XmsgImAuthCfgXscWebSocketServer::clear_tcp() {
  if (GetArenaNoVirtual() == NULL && tcp_ != NULL) {
    delete tcp_;
  }
  tcp_ = NULL;
}
inline const ::XmsgImAuthCfgXscTcpServer& XmsgImAuthCfgXscWebSocketServer::tcp() const {
  const ::XmsgImAuthCfgXscTcpServer* p = tcp_;
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscWebSocketServer.tcp)
  return p != NULL ? *p : *reinterpret_cast<const ::XmsgImAuthCfgXscTcpServer*>(
      &::_XmsgImAuthCfgXscTcpServer_default_instance_);
}
inline ::XmsgImAuthCfgXscTcpServer* XmsgImAuthCfgXscWebSocketServer::release_tcp() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgXscWebSocketServer.tcp)
  
  ::XmsgImAuthCfgXscTcpServer* temp = tcp_;
  tcp_ = NULL;
  return temp;
}
inline ::XmsgImAuthCfgXscTcpServer* XmsgImAuthCfgXscWebSocketServer::mutable_tcp() {
  
  if (tcp_ == NULL) {
    tcp_ = new ::XmsgImAuthCfgXscTcpServer;
  }
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgXscWebSocketServer.tcp)
  return tcp_;
}
inline void XmsgImAuthCfgXscWebSocketServer::set_allocated_tcp(::XmsgImAuthCfgXscTcpServer* tcp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete tcp_;
  }
  if (tcp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tcp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tcp, submessage_arena);
    }
    
  } else {
    
  }
  tcp_ = tcp;
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgXscWebSocketServer.tcp)
}

// -------------------------------------------------------------------

// XmsgImAuthCfgXscUdpServer

// string addr = 1;
inline void XmsgImAuthCfgXscUdpServer::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgXscUdpServer::addr() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscUdpServer.addr)
  return addr_.GetNoArena();
}
inline void XmsgImAuthCfgXscUdpServer::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscUdpServer.addr)
}
#if LANG_CXX11
inline void XmsgImAuthCfgXscUdpServer::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgXscUdpServer.addr)
}
#endif
inline void XmsgImAuthCfgXscUdpServer::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgXscUdpServer.addr)
}
inline void XmsgImAuthCfgXscUdpServer::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgXscUdpServer.addr)
}
inline ::std::string* XmsgImAuthCfgXscUdpServer::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgXscUdpServer.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgXscUdpServer::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgXscUdpServer.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgXscUdpServer::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgXscUdpServer.addr)
}

// -------------------------------------------------------------------

// XmsgImAuthCfgXscRudpServer

// string addr = 1;
inline void XmsgImAuthCfgXscRudpServer::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgXscRudpServer::addr() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXscRudpServer.addr)
  return addr_.GetNoArena();
}
inline void XmsgImAuthCfgXscRudpServer::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXscRudpServer.addr)
}
#if LANG_CXX11
inline void XmsgImAuthCfgXscRudpServer::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgXscRudpServer.addr)
}
#endif
inline void XmsgImAuthCfgXscRudpServer::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgXscRudpServer.addr)
}
inline void XmsgImAuthCfgXscRudpServer::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgXscRudpServer.addr)
}
inline ::std::string* XmsgImAuthCfgXscRudpServer::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgXscRudpServer.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgXscRudpServer::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgXscRudpServer.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgXscRudpServer::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgXscRudpServer.addr)
}

// -------------------------------------------------------------------

// XmsgImAuthCfgXmsgNeH2nAddr

// string neg = 1;
inline void XmsgImAuthCfgXmsgNeH2nAddr::clear_neg() {
  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgXmsgNeH2nAddr::neg() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXmsgNeH2nAddr.neg)
  return neg_.GetNoArena();
}
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_neg(const ::std::string& value) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXmsgNeH2nAddr.neg)
}
#if LANG_CXX11
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_neg(::std::string&& value) {
  
  neg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgXmsgNeH2nAddr.neg)
}
#endif
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_neg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgXmsgNeH2nAddr.neg)
}
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_neg(const char* value, size_t size) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgXmsgNeH2nAddr.neg)
}
inline ::std::string* XmsgImAuthCfgXmsgNeH2nAddr::mutable_neg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgXmsgNeH2nAddr.neg)
  return neg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgXmsgNeH2nAddr::release_neg() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgXmsgNeH2nAddr.neg)
  
  return neg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_allocated_neg(::std::string* neg) {
  if (neg != NULL) {
    
  } else {
    
  }
  neg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgXmsgNeH2nAddr.neg)
}

// string addr = 2;
inline void XmsgImAuthCfgXmsgNeH2nAddr::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgXmsgNeH2nAddr::addr() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXmsgNeH2nAddr.addr)
  return addr_.GetNoArena();
}
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXmsgNeH2nAddr.addr)
}
#if LANG_CXX11
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgXmsgNeH2nAddr.addr)
}
#endif
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgXmsgNeH2nAddr.addr)
}
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgXmsgNeH2nAddr.addr)
}
inline ::std::string* XmsgImAuthCfgXmsgNeH2nAddr::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgXmsgNeH2nAddr.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgXmsgNeH2nAddr::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgXmsgNeH2nAddr.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgXmsgNeH2nAddr.addr)
}

// string pwd = 3;
inline void XmsgImAuthCfgXmsgNeH2nAddr::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgXmsgNeH2nAddr::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXmsgNeH2nAddr.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXmsgNeH2nAddr.pwd)
}
#if LANG_CXX11
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgXmsgNeH2nAddr.pwd)
}
#endif
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgXmsgNeH2nAddr.pwd)
}
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgXmsgNeH2nAddr.pwd)
}
inline ::std::string* XmsgImAuthCfgXmsgNeH2nAddr::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgXmsgNeH2nAddr.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgXmsgNeH2nAddr::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgXmsgNeH2nAddr.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgXmsgNeH2nAddr.pwd)
}

// string alg = 4;
inline void XmsgImAuthCfgXmsgNeH2nAddr::clear_alg() {
  alg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgXmsgNeH2nAddr::alg() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXmsgNeH2nAddr.alg)
  return alg_.GetNoArena();
}
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_alg(const ::std::string& value) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXmsgNeH2nAddr.alg)
}
#if LANG_CXX11
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_alg(::std::string&& value) {
  
  alg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgXmsgNeH2nAddr.alg)
}
#endif
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_alg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgXmsgNeH2nAddr.alg)
}
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_alg(const char* value, size_t size) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgXmsgNeH2nAddr.alg)
}
inline ::std::string* XmsgImAuthCfgXmsgNeH2nAddr::mutable_alg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgXmsgNeH2nAddr.alg)
  return alg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgXmsgNeH2nAddr::release_alg() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgXmsgNeH2nAddr.alg)
  
  return alg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_allocated_alg(::std::string* alg) {
  if (alg != NULL) {
    
  } else {
    
  }
  alg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alg);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgXmsgNeH2nAddr.alg)
}

// uint32 redundant = 5;
inline void XmsgImAuthCfgXmsgNeH2nAddr::clear_redundant() {
  redundant_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgXmsgNeH2nAddr::redundant() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXmsgNeH2nAddr.redundant)
  return redundant_;
}
inline void XmsgImAuthCfgXmsgNeH2nAddr::set_redundant(::google::protobuf::uint32 value) {
  
  redundant_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXmsgNeH2nAddr.redundant)
}

// -------------------------------------------------------------------

// XmsgImAuthCfgXmsgNeN2hAddr

// string neg = 1;
inline void XmsgImAuthCfgXmsgNeN2hAddr::clear_neg() {
  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgXmsgNeN2hAddr::neg() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXmsgNeN2hAddr.neg)
  return neg_.GetNoArena();
}
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_neg(const ::std::string& value) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXmsgNeN2hAddr.neg)
}
#if LANG_CXX11
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_neg(::std::string&& value) {
  
  neg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgXmsgNeN2hAddr.neg)
}
#endif
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_neg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgXmsgNeN2hAddr.neg)
}
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_neg(const char* value, size_t size) {
  
  neg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgXmsgNeN2hAddr.neg)
}
inline ::std::string* XmsgImAuthCfgXmsgNeN2hAddr::mutable_neg() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgXmsgNeN2hAddr.neg)
  return neg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgXmsgNeN2hAddr::release_neg() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgXmsgNeN2hAddr.neg)
  
  return neg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_allocated_neg(::std::string* neg) {
  if (neg != NULL) {
    
  } else {
    
  }
  neg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), neg);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgXmsgNeN2hAddr.neg)
}

// string cgt = 2;
inline void XmsgImAuthCfgXmsgNeN2hAddr::clear_cgt() {
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgXmsgNeN2hAddr::cgt() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXmsgNeN2hAddr.cgt)
  return cgt_.GetNoArena();
}
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_cgt(const ::std::string& value) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXmsgNeN2hAddr.cgt)
}
#if LANG_CXX11
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_cgt(::std::string&& value) {
  
  cgt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgXmsgNeN2hAddr.cgt)
}
#endif
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_cgt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgXmsgNeN2hAddr.cgt)
}
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_cgt(const char* value, size_t size) {
  
  cgt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgXmsgNeN2hAddr.cgt)
}
inline ::std::string* XmsgImAuthCfgXmsgNeN2hAddr::mutable_cgt() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgXmsgNeN2hAddr.cgt)
  return cgt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgXmsgNeN2hAddr::release_cgt() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgXmsgNeN2hAddr.cgt)
  
  return cgt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_allocated_cgt(::std::string* cgt) {
  if (cgt != NULL) {
    
  } else {
    
  }
  cgt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cgt);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgXmsgNeN2hAddr.cgt)
}

// string pwd = 3;
inline void XmsgImAuthCfgXmsgNeN2hAddr::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgXmsgNeN2hAddr::pwd() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXmsgNeN2hAddr.pwd)
  return pwd_.GetNoArena();
}
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXmsgNeN2hAddr.pwd)
}
#if LANG_CXX11
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgXmsgNeN2hAddr.pwd)
}
#endif
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgXmsgNeN2hAddr.pwd)
}
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_pwd(const char* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgXmsgNeN2hAddr.pwd)
}
inline ::std::string* XmsgImAuthCfgXmsgNeN2hAddr::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgXmsgNeN2hAddr.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgXmsgNeN2hAddr::release_pwd() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgXmsgNeN2hAddr.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgXmsgNeN2hAddr.pwd)
}

// string addr = 4;
inline void XmsgImAuthCfgXmsgNeN2hAddr::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthCfgXmsgNeN2hAddr::addr() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgXmsgNeN2hAddr.addr)
  return addr_.GetNoArena();
}
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgXmsgNeN2hAddr.addr)
}
#if LANG_CXX11
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthCfgXmsgNeN2hAddr.addr)
}
#endif
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthCfgXmsgNeN2hAddr.addr)
}
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthCfgXmsgNeN2hAddr.addr)
}
inline ::std::string* XmsgImAuthCfgXmsgNeN2hAddr::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthCfgXmsgNeN2hAddr.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthCfgXmsgNeN2hAddr::release_addr() {
  // @@protoc_insertion_point(field_release:XmsgImAuthCfgXmsgNeN2hAddr.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthCfgXmsgNeN2hAddr::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthCfgXmsgNeN2hAddr.addr)
}

// -------------------------------------------------------------------

// XmsgImAuthPubService

// string name = 1;
inline void XmsgImAuthPubService::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthPubService::name() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthPubService.name)
  return name_.GetNoArena();
}
inline void XmsgImAuthPubService::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthPubService.name)
}
#if LANG_CXX11
inline void XmsgImAuthPubService::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthPubService.name)
}
#endif
inline void XmsgImAuthPubService::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthPubService.name)
}
inline void XmsgImAuthPubService::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthPubService.name)
}
inline ::std::string* XmsgImAuthPubService::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthPubService.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthPubService::release_name() {
  // @@protoc_insertion_point(field_release:XmsgImAuthPubService.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthPubService::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthPubService.name)
}

// repeated .XmsgImAuthPubServiceAddress addr = 2;
inline int XmsgImAuthPubService::addr_size() const {
  return addr_.size();
}
inline void XmsgImAuthPubService::clear_addr() {
  addr_.Clear();
}
inline const ::XmsgImAuthPubServiceAddress& XmsgImAuthPubService::addr(int index) const {
  // @@protoc_insertion_point(field_get:XmsgImAuthPubService.addr)
  return addr_.Get(index);
}
inline ::XmsgImAuthPubServiceAddress* XmsgImAuthPubService::mutable_addr(int index) {
  // @@protoc_insertion_point(field_mutable:XmsgImAuthPubService.addr)
  return addr_.Mutable(index);
}
inline ::XmsgImAuthPubServiceAddress* XmsgImAuthPubService::add_addr() {
  // @@protoc_insertion_point(field_add:XmsgImAuthPubService.addr)
  return addr_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::XmsgImAuthPubServiceAddress >*
XmsgImAuthPubService::mutable_addr() {
  // @@protoc_insertion_point(field_mutable_list:XmsgImAuthPubService.addr)
  return &addr_;
}
inline const ::google::protobuf::RepeatedPtrField< ::XmsgImAuthPubServiceAddress >&
XmsgImAuthPubService::addr() const {
  // @@protoc_insertion_point(field_list:XmsgImAuthPubService.addr)
  return addr_;
}

// -------------------------------------------------------------------

// XmsgImAuthPubServiceAddress

// string host = 1;
inline void XmsgImAuthPubServiceAddress::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthPubServiceAddress::host() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthPubServiceAddress.host)
  return host_.GetNoArena();
}
inline void XmsgImAuthPubServiceAddress::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthPubServiceAddress.host)
}
#if LANG_CXX11
inline void XmsgImAuthPubServiceAddress::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthPubServiceAddress.host)
}
#endif
inline void XmsgImAuthPubServiceAddress::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthPubServiceAddress.host)
}
inline void XmsgImAuthPubServiceAddress::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthPubServiceAddress.host)
}
inline ::std::string* XmsgImAuthPubServiceAddress::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthPubServiceAddress.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthPubServiceAddress::release_host() {
  // @@protoc_insertion_point(field_release:XmsgImAuthPubServiceAddress.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthPubServiceAddress::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthPubServiceAddress.host)
}

// string proto = 2;
inline void XmsgImAuthPubServiceAddress::clear_proto() {
  proto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& XmsgImAuthPubServiceAddress::proto() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthPubServiceAddress.proto)
  return proto_.GetNoArena();
}
inline void XmsgImAuthPubServiceAddress::set_proto(const ::std::string& value) {
  
  proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XmsgImAuthPubServiceAddress.proto)
}
#if LANG_CXX11
inline void XmsgImAuthPubServiceAddress::set_proto(::std::string&& value) {
  
  proto_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XmsgImAuthPubServiceAddress.proto)
}
#endif
inline void XmsgImAuthPubServiceAddress::set_proto(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XmsgImAuthPubServiceAddress.proto)
}
inline void XmsgImAuthPubServiceAddress::set_proto(const char* value, size_t size) {
  
  proto_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XmsgImAuthPubServiceAddress.proto)
}
inline ::std::string* XmsgImAuthPubServiceAddress::mutable_proto() {
  
  // @@protoc_insertion_point(field_mutable:XmsgImAuthPubServiceAddress.proto)
  return proto_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XmsgImAuthPubServiceAddress::release_proto() {
  // @@protoc_insertion_point(field_release:XmsgImAuthPubServiceAddress.proto)
  
  return proto_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XmsgImAuthPubServiceAddress::set_allocated_proto(::std::string* proto) {
  if (proto != NULL) {
    
  } else {
    
  }
  proto_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proto);
  // @@protoc_insertion_point(field_set_allocated:XmsgImAuthPubServiceAddress.proto)
}

// -------------------------------------------------------------------

// XmsgImAuthCfgMisc

// bool registeEnable = 3;
inline void XmsgImAuthCfgMisc::clear_registeenable() {
  registeenable_ = false;
}
inline bool XmsgImAuthCfgMisc::registeenable() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgMisc.registeEnable)
  return registeenable_;
}
inline void XmsgImAuthCfgMisc::set_registeenable(bool value) {
  
  registeenable_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgMisc.registeEnable)
}

// uint32 tokenExpiredSeconds = 4;
inline void XmsgImAuthCfgMisc::clear_tokenexpiredseconds() {
  tokenexpiredseconds_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgMisc::tokenexpiredseconds() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgMisc.tokenExpiredSeconds)
  return tokenexpiredseconds_;
}
inline void XmsgImAuthCfgMisc::set_tokenexpiredseconds(::google::protobuf::uint32 value) {
  
  tokenexpiredseconds_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgMisc.tokenExpiredSeconds)
}

// uint32 tokenSaveBatchSize = 5;
inline void XmsgImAuthCfgMisc::clear_tokensavebatchsize() {
  tokensavebatchsize_ = 0u;
}
inline ::google::protobuf::uint32 XmsgImAuthCfgMisc::tokensavebatchsize() const {
  // @@protoc_insertion_point(field_get:XmsgImAuthCfgMisc.tokenSaveBatchSize)
  return tokensavebatchsize_;
}
inline void XmsgImAuthCfgMisc::set_tokensavebatchsize(::google::protobuf::uint32 value) {
  
  tokensavebatchsize_ = value;
  // @@protoc_insertion_point(field_set:XmsgImAuthCfgMisc.tokenSaveBatchSize)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cfg_2dx_2dmsg_2dim_2dauth_2eproto__INCLUDED
