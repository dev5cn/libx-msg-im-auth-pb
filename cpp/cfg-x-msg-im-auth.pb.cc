// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cfg-x-msg-im-auth.proto

#include "cfg-x-msg-im-auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse>
      _instance;
} _XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse_default_instance_;
class XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse>
      _instance;
} _XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse_default_instance_;
class XmsgImAuthCfgPb_KafkaProdEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse>
      _instance;
} _XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse_default_instance_;
class XmsgImAuthCfgPbDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthCfgPb>
      _instance;
} _XmsgImAuthCfgPb_default_instance_;
class XmsgImAuthCfgMongodbDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthCfgMongodb>
      _instance;
} _XmsgImAuthCfgMongodb_default_instance_;
class XmsgImAuthCfgMysqlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthCfgMysql>
      _instance;
} _XmsgImAuthCfgMysql_default_instance_;
class XmsgImAuthCfgLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthCfgLog>
      _instance;
} _XmsgImAuthCfgLog_default_instance_;
class XmsgImAuthCfgXscTcpServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthCfgXscTcpServer>
      _instance;
} _XmsgImAuthCfgXscTcpServer_default_instance_;
class XmsgImAuthCfgXscHttpServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthCfgXscHttpServer>
      _instance;
} _XmsgImAuthCfgXscHttpServer_default_instance_;
class XmsgImAuthCfgXscWebSocketServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthCfgXscWebSocketServer>
      _instance;
} _XmsgImAuthCfgXscWebSocketServer_default_instance_;
class XmsgImAuthCfgXscUdpServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthCfgXscUdpServer>
      _instance;
} _XmsgImAuthCfgXscUdpServer_default_instance_;
class XmsgImAuthCfgXscRudpServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthCfgXscRudpServer>
      _instance;
} _XmsgImAuthCfgXscRudpServer_default_instance_;
class XmsgImAuthCfgXmsgNeH2nAddrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthCfgXmsgNeH2nAddr>
      _instance;
} _XmsgImAuthCfgXmsgNeH2nAddr_default_instance_;
class XmsgImAuthCfgXmsgNeN2hAddrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthCfgXmsgNeN2hAddr>
      _instance;
} _XmsgImAuthCfgXmsgNeN2hAddr_default_instance_;
class XmsgImAuthPubServiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthPubService>
      _instance;
} _XmsgImAuthPubService_default_instance_;
class XmsgImAuthPubServiceAddressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthPubServiceAddress>
      _instance;
} _XmsgImAuthPubServiceAddress_default_instance_;
class XmsgImAuthCfgMiscDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<XmsgImAuthCfgMisc>
      _instance;
} _XmsgImAuthCfgMisc_default_instance_;
namespace protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto {
void InitDefaultsXmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthPubService();
  {
    void* ptr = &::_XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse_default_instance_;
    new (ptr) ::XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse();
  }
  ::XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUseImpl);
}

void InitDefaultsXmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthPubService();
  {
    void* ptr = &::_XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse_default_instance_;
    new (ptr) ::XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse();
  }
  ::XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUseImpl);
}

void InitDefaultsXmsgImAuthCfgPb_KafkaProdEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse_default_instance_;
    new (ptr) ::XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse();
  }
  ::XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthCfgPb_KafkaProdEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthCfgPb_KafkaProdEntry_DoNotUseImpl);
}

void InitDefaultsXmsgImAuthCfgPbImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgMongodb();
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgMysql();
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgLog();
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscTcpServer();
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscHttpServer();
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscWebSocketServer();
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscUdpServer();
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscRudpServer();
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXmsgNeH2nAddr();
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXmsgNeN2hAddr();
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse();
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse();
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgMisc();
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgPb_KafkaProdEntry_DoNotUse();
  {
    void* ptr = &::_XmsgImAuthCfgPb_default_instance_;
    new (ptr) ::XmsgImAuthCfgPb();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImAuthCfgPb::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthCfgPb() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthCfgPbImpl);
}

void InitDefaultsXmsgImAuthCfgMongodbImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImAuthCfgMongodb_default_instance_;
    new (ptr) ::XmsgImAuthCfgMongodb();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImAuthCfgMongodb::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthCfgMongodb() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthCfgMongodbImpl);
}

void InitDefaultsXmsgImAuthCfgMysqlImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImAuthCfgMysql_default_instance_;
    new (ptr) ::XmsgImAuthCfgMysql();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImAuthCfgMysql::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthCfgMysql() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthCfgMysqlImpl);
}

void InitDefaultsXmsgImAuthCfgLogImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImAuthCfgLog_default_instance_;
    new (ptr) ::XmsgImAuthCfgLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImAuthCfgLog::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthCfgLog() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthCfgLogImpl);
}

void InitDefaultsXmsgImAuthCfgXscTcpServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImAuthCfgXscTcpServer_default_instance_;
    new (ptr) ::XmsgImAuthCfgXscTcpServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImAuthCfgXscTcpServer::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthCfgXscTcpServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthCfgXscTcpServerImpl);
}

void InitDefaultsXmsgImAuthCfgXscHttpServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscTcpServer();
  {
    void* ptr = &::_XmsgImAuthCfgXscHttpServer_default_instance_;
    new (ptr) ::XmsgImAuthCfgXscHttpServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImAuthCfgXscHttpServer::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthCfgXscHttpServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthCfgXscHttpServerImpl);
}

void InitDefaultsXmsgImAuthCfgXscWebSocketServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscTcpServer();
  {
    void* ptr = &::_XmsgImAuthCfgXscWebSocketServer_default_instance_;
    new (ptr) ::XmsgImAuthCfgXscWebSocketServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImAuthCfgXscWebSocketServer::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthCfgXscWebSocketServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthCfgXscWebSocketServerImpl);
}

void InitDefaultsXmsgImAuthCfgXscUdpServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImAuthCfgXscUdpServer_default_instance_;
    new (ptr) ::XmsgImAuthCfgXscUdpServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImAuthCfgXscUdpServer::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthCfgXscUdpServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthCfgXscUdpServerImpl);
}

void InitDefaultsXmsgImAuthCfgXscRudpServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImAuthCfgXscRudpServer_default_instance_;
    new (ptr) ::XmsgImAuthCfgXscRudpServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImAuthCfgXscRudpServer::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthCfgXscRudpServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthCfgXscRudpServerImpl);
}

void InitDefaultsXmsgImAuthCfgXmsgNeH2nAddrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImAuthCfgXmsgNeH2nAddr_default_instance_;
    new (ptr) ::XmsgImAuthCfgXmsgNeH2nAddr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImAuthCfgXmsgNeH2nAddr::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthCfgXmsgNeH2nAddr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthCfgXmsgNeH2nAddrImpl);
}

void InitDefaultsXmsgImAuthCfgXmsgNeN2hAddrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImAuthCfgXmsgNeN2hAddr_default_instance_;
    new (ptr) ::XmsgImAuthCfgXmsgNeN2hAddr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImAuthCfgXmsgNeN2hAddr::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthCfgXmsgNeN2hAddr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthCfgXmsgNeN2hAddrImpl);
}

void InitDefaultsXmsgImAuthPubServiceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthPubServiceAddress();
  {
    void* ptr = &::_XmsgImAuthPubService_default_instance_;
    new (ptr) ::XmsgImAuthPubService();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImAuthPubService::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthPubService() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthPubServiceImpl);
}

void InitDefaultsXmsgImAuthPubServiceAddressImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImAuthPubServiceAddress_default_instance_;
    new (ptr) ::XmsgImAuthPubServiceAddress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImAuthPubServiceAddress::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthPubServiceAddress() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthPubServiceAddressImpl);
}

void InitDefaultsXmsgImAuthCfgMiscImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_XmsgImAuthCfgMisc_default_instance_;
    new (ptr) ::XmsgImAuthCfgMisc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::XmsgImAuthCfgMisc::InitAsDefaultInstance();
}

void InitDefaultsXmsgImAuthCfgMisc() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsXmsgImAuthCfgMiscImpl);
}

::google::protobuf::Metadata file_level_metadata[17];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, cgt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, cfgtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, mongodb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, mysql_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, pubtcp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, pubhttp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, pubwebsocket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, pubudp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, pubrudp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, pritcp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, h2n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, n2h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, xmsgapserviceaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, xmsgossserviceaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, misc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, kafkaprod_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, gts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgPb, uts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgMongodb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgMongodb, uri_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgMysql, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgMysql, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgMysql, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgMysql, db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgMysql, usr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgMysql, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgMysql, poolsize_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgLog, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgLog, output_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscTcpServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscTcpServer, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscTcpServer, worker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscTcpServer, peerlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscTcpServer, peermtu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscTcpServer, peerrcvbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscTcpServer, peersndbuf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscTcpServer, lazyclose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscTcpServer, tracing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscTcpServer, heartbeat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscTcpServer, n2hzombie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscTcpServer, n2htranstimeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscTcpServer, n2htracing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscTcpServer, h2nreconn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscTcpServer, h2ntranstimeout_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscHttpServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscHttpServer, tcp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscHttpServer, headerlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscHttpServer, bodylimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscHttpServer, closewait_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscHttpServer, requiredheader_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscWebSocketServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscWebSocketServer, tcp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscUdpServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscUdpServer, addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscRudpServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXscRudpServer, addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXmsgNeH2nAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXmsgNeH2nAddr, neg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXmsgNeH2nAddr, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXmsgNeH2nAddr, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXmsgNeH2nAddr, alg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXmsgNeH2nAddr, redundant_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXmsgNeN2hAddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXmsgNeN2hAddr, neg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXmsgNeN2hAddr, cgt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXmsgNeN2hAddr, pwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgXmsgNeN2hAddr, addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthPubService, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthPubService, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthPubService, addr_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthPubServiceAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthPubServiceAddress, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthPubServiceAddress, proto_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgMisc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgMisc, registeenable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgMisc, tokenexpiredseconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::XmsgImAuthCfgMisc, tokensavebatchsize_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse)},
  { 9, 16, sizeof(::XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse)},
  { 18, 25, sizeof(::XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse)},
  { 27, -1, sizeof(::XmsgImAuthCfgPb)},
  { 51, -1, sizeof(::XmsgImAuthCfgMongodb)},
  { 57, -1, sizeof(::XmsgImAuthCfgMysql)},
  { 68, -1, sizeof(::XmsgImAuthCfgLog)},
  { 75, -1, sizeof(::XmsgImAuthCfgXscTcpServer)},
  { 94, -1, sizeof(::XmsgImAuthCfgXscHttpServer)},
  { 104, -1, sizeof(::XmsgImAuthCfgXscWebSocketServer)},
  { 110, -1, sizeof(::XmsgImAuthCfgXscUdpServer)},
  { 116, -1, sizeof(::XmsgImAuthCfgXscRudpServer)},
  { 122, -1, sizeof(::XmsgImAuthCfgXmsgNeH2nAddr)},
  { 132, -1, sizeof(::XmsgImAuthCfgXmsgNeN2hAddr)},
  { 141, -1, sizeof(::XmsgImAuthPubService)},
  { 148, -1, sizeof(::XmsgImAuthPubServiceAddress)},
  { 155, -1, sizeof(::XmsgImAuthCfgMisc)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthCfgPb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthCfgMongodb_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthCfgMysql_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthCfgLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthCfgXscTcpServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthCfgXscHttpServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthCfgXscWebSocketServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthCfgXscUdpServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthCfgXscRudpServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthCfgXmsgNeH2nAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthCfgXmsgNeN2hAddr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthPubService_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthPubServiceAddress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_XmsgImAuthCfgMisc_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cfg-x-msg-im-auth.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027cfg-x-msg-im-auth.proto\"\326\007\n\017XmsgImAuth"
      "CfgPb\022\013\n\003cgt\030\001 \001(\t\022\017\n\007cfgType\030\002 \001(\t\022&\n\007m"
      "ongodb\030\003 \001(\0132\025.XmsgImAuthCfgMongodb\022\"\n\005m"
      "ysql\030\004 \001(\0132\023.XmsgImAuthCfgMysql\022\036\n\003log\030\005"
      " \001(\0132\021.XmsgImAuthCfgLog\022*\n\006pubTcp\030\006 \001(\0132"
      "\032.XmsgImAuthCfgXscTcpServer\022,\n\007pubHttp\030\007"
      " \001(\0132\033.XmsgImAuthCfgXscHttpServer\0226\n\014pub"
      "WebSocket\030\010 \001(\0132 .XmsgImAuthCfgXscWebSoc"
      "ketServer\022*\n\006pubUdp\030\t \001(\0132\032.XmsgImAuthCf"
      "gXscUdpServer\022,\n\007pubRudp\030\n \001(\0132\033.XmsgImA"
      "uthCfgXscRudpServer\022*\n\006priTcp\030\013 \001(\0132\032.Xm"
      "sgImAuthCfgXscTcpServer\022(\n\003h2n\030\014 \003(\0132\033.X"
      "msgImAuthCfgXmsgNeH2nAddr\022(\n\003n2h\030\r \003(\0132\033"
      ".XmsgImAuthCfgXmsgNeN2hAddr\022B\n\021xmsgApSer"
      "viceAddr\030\022 \003(\0132\'.XmsgImAuthCfgPb.XmsgApS"
      "erviceAddrEntry\022D\n\022xmsgOssServiceAddr\030\023 "
      "\003(\0132(.XmsgImAuthCfgPb.XmsgOssServiceAddr"
      "Entry\022 \n\004misc\030\016 \001(\0132\022.XmsgImAuthCfgMisc\022"
      "2\n\tkafkaProd\030\017 \003(\0132\037.XmsgImAuthCfgPb.Kaf"
      "kaProdEntry\022\013\n\003gts\030\020 \001(\004\022\013\n\003uts\030\021 \001(\004\032O\n"
      "\026XmsgApServiceAddrEntry\022\013\n\003key\030\001 \001(\t\022$\n\005"
      "value\030\002 \001(\0132\025.XmsgImAuthPubService:\0028\001\032P"
      "\n\027XmsgOssServiceAddrEntry\022\013\n\003key\030\001 \001(\t\022$"
      "\n\005value\030\002 \001(\0132\025.XmsgImAuthPubService:\0028\001"
      "\0320\n\016KafkaProdEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
      "\030\002 \001(\t:\0028\001\"#\n\024XmsgImAuthCfgMongodb\022\013\n\003ur"
      "i\030\001 \001(\t\"m\n\022XmsgImAuthCfgMysql\022\014\n\004host\030\001 "
      "\001(\t\022\014\n\004port\030\002 \001(\r\022\n\n\002db\030\003 \001(\t\022\013\n\003usr\030\004 \001"
      "(\t\022\020\n\010password\030\005 \001(\t\022\020\n\010poolSize\030\006 \001(\r\"1"
      "\n\020XmsgImAuthCfgLog\022\r\n\005level\030\001 \001(\t\022\016\n\006out"
      "put\030\002 \001(\t\"\250\002\n\031XmsgImAuthCfgXscTcpServer\022"
      "\014\n\004addr\030\001 \001(\t\022\016\n\006worker\030\002 \001(\r\022\021\n\tpeerLim"
      "it\030\003 \001(\r\022\017\n\007peerMtu\030\004 \001(\r\022\022\n\npeerRcvBuf\030"
      "\005 \001(\r\022\022\n\npeerSndBuf\030\006 \001(\r\022\021\n\tlazyClose\030\007"
      " \001(\r\022\017\n\007tracing\030\010 \001(\010\022\021\n\theartbeat\030\t \001(\r"
      "\022\021\n\tn2hZombie\030\n \001(\r\022\027\n\017n2hTransTimeout\030\013"
      " \001(\r\022\022\n\nn2hTracing\030\014 \001(\010\022\021\n\th2nReConn\030\r "
      "\001(\r\022\027\n\017h2nTransTimeout\030\016 \001(\r\"\230\001\n\032XmsgImA"
      "uthCfgXscHttpServer\022\'\n\003tcp\030\001 \001(\0132\032.XmsgI"
      "mAuthCfgXscTcpServer\022\023\n\013headerLimit\030\002 \001("
      "\r\022\021\n\tbodyLimit\030\003 \001(\r\022\021\n\tcloseWait\030\004 \001(\r\022"
      "\026\n\016requiredHeader\030\005 \003(\t\"J\n\037XmsgImAuthCfg"
      "XscWebSocketServer\022\'\n\003tcp\030\001 \001(\0132\032.XmsgIm"
      "AuthCfgXscTcpServer\")\n\031XmsgImAuthCfgXscU"
      "dpServer\022\014\n\004addr\030\001 \001(\t\"*\n\032XmsgImAuthCfgX"
      "scRudpServer\022\014\n\004addr\030\001 \001(\t\"d\n\032XmsgImAuth"
      "CfgXmsgNeH2nAddr\022\013\n\003neg\030\001 \001(\t\022\014\n\004addr\030\002 "
      "\001(\t\022\013\n\003pwd\030\003 \001(\t\022\013\n\003alg\030\004 \001(\t\022\021\n\tredunda"
      "nt\030\005 \001(\r\"Q\n\032XmsgImAuthCfgXmsgNeN2hAddr\022\013"
      "\n\003neg\030\001 \001(\t\022\013\n\003cgt\030\002 \001(\t\022\013\n\003pwd\030\003 \001(\t\022\014\n"
      "\004addr\030\004 \001(\t\"P\n\024XmsgImAuthPubService\022\014\n\004n"
      "ame\030\001 \001(\t\022*\n\004addr\030\002 \003(\0132\034.XmsgImAuthPubS"
      "erviceAddress\":\n\033XmsgImAuthPubServiceAdd"
      "ress\022\014\n\004host\030\001 \001(\t\022\r\n\005proto\030\002 \001(\t\"c\n\021Xms"
      "gImAuthCfgMisc\022\025\n\rregisteEnable\030\003 \001(\010\022\033\n"
      "\023tokenExpiredSeconds\030\004 \001(\r\022\032\n\022tokenSaveB"
      "atchSize\030\005 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2262);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cfg-x-msg-im-auth.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto

// ===================================================================

XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse::XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse() {}
XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse::XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse::MergeFrom(const XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse::GetMetadata() const {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[0];
}
void XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse::XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse() {}
XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse::XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse::MergeFrom(const XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse::GetMetadata() const {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[1];
}
void XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse::XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse() {}
XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse::XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse::MergeFrom(const XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse::GetMetadata() const {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[2];
}
void XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void XmsgImAuthCfgPb::InitAsDefaultInstance() {
  ::_XmsgImAuthCfgPb_default_instance_._instance.get_mutable()->mongodb_ = const_cast< ::XmsgImAuthCfgMongodb*>(
      ::XmsgImAuthCfgMongodb::internal_default_instance());
  ::_XmsgImAuthCfgPb_default_instance_._instance.get_mutable()->mysql_ = const_cast< ::XmsgImAuthCfgMysql*>(
      ::XmsgImAuthCfgMysql::internal_default_instance());
  ::_XmsgImAuthCfgPb_default_instance_._instance.get_mutable()->log_ = const_cast< ::XmsgImAuthCfgLog*>(
      ::XmsgImAuthCfgLog::internal_default_instance());
  ::_XmsgImAuthCfgPb_default_instance_._instance.get_mutable()->pubtcp_ = const_cast< ::XmsgImAuthCfgXscTcpServer*>(
      ::XmsgImAuthCfgXscTcpServer::internal_default_instance());
  ::_XmsgImAuthCfgPb_default_instance_._instance.get_mutable()->pubhttp_ = const_cast< ::XmsgImAuthCfgXscHttpServer*>(
      ::XmsgImAuthCfgXscHttpServer::internal_default_instance());
  ::_XmsgImAuthCfgPb_default_instance_._instance.get_mutable()->pubwebsocket_ = const_cast< ::XmsgImAuthCfgXscWebSocketServer*>(
      ::XmsgImAuthCfgXscWebSocketServer::internal_default_instance());
  ::_XmsgImAuthCfgPb_default_instance_._instance.get_mutable()->pubudp_ = const_cast< ::XmsgImAuthCfgXscUdpServer*>(
      ::XmsgImAuthCfgXscUdpServer::internal_default_instance());
  ::_XmsgImAuthCfgPb_default_instance_._instance.get_mutable()->pubrudp_ = const_cast< ::XmsgImAuthCfgXscRudpServer*>(
      ::XmsgImAuthCfgXscRudpServer::internal_default_instance());
  ::_XmsgImAuthCfgPb_default_instance_._instance.get_mutable()->pritcp_ = const_cast< ::XmsgImAuthCfgXscTcpServer*>(
      ::XmsgImAuthCfgXscTcpServer::internal_default_instance());
  ::_XmsgImAuthCfgPb_default_instance_._instance.get_mutable()->misc_ = const_cast< ::XmsgImAuthCfgMisc*>(
      ::XmsgImAuthCfgMisc::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImAuthCfgPb::kCgtFieldNumber;
const int XmsgImAuthCfgPb::kCfgTypeFieldNumber;
const int XmsgImAuthCfgPb::kMongodbFieldNumber;
const int XmsgImAuthCfgPb::kMysqlFieldNumber;
const int XmsgImAuthCfgPb::kLogFieldNumber;
const int XmsgImAuthCfgPb::kPubTcpFieldNumber;
const int XmsgImAuthCfgPb::kPubHttpFieldNumber;
const int XmsgImAuthCfgPb::kPubWebSocketFieldNumber;
const int XmsgImAuthCfgPb::kPubUdpFieldNumber;
const int XmsgImAuthCfgPb::kPubRudpFieldNumber;
const int XmsgImAuthCfgPb::kPriTcpFieldNumber;
const int XmsgImAuthCfgPb::kH2NFieldNumber;
const int XmsgImAuthCfgPb::kN2HFieldNumber;
const int XmsgImAuthCfgPb::kXmsgApServiceAddrFieldNumber;
const int XmsgImAuthCfgPb::kXmsgOssServiceAddrFieldNumber;
const int XmsgImAuthCfgPb::kMiscFieldNumber;
const int XmsgImAuthCfgPb::kKafkaProdFieldNumber;
const int XmsgImAuthCfgPb::kGtsFieldNumber;
const int XmsgImAuthCfgPb::kUtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImAuthCfgPb::XmsgImAuthCfgPb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgPb();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImAuthCfgPb)
}
XmsgImAuthCfgPb::XmsgImAuthCfgPb(const XmsgImAuthCfgPb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      h2n_(from.h2n_),
      n2h_(from.n2h_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kafkaprod_.MergeFrom(from.kafkaprod_);
  xmsgapserviceaddr_.MergeFrom(from.xmsgapserviceaddr_);
  xmsgossserviceaddr_.MergeFrom(from.xmsgossserviceaddr_);
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  cfgtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cfgtype().size() > 0) {
    cfgtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfgtype_);
  }
  if (from.has_mongodb()) {
    mongodb_ = new ::XmsgImAuthCfgMongodb(*from.mongodb_);
  } else {
    mongodb_ = NULL;
  }
  if (from.has_mysql()) {
    mysql_ = new ::XmsgImAuthCfgMysql(*from.mysql_);
  } else {
    mysql_ = NULL;
  }
  if (from.has_log()) {
    log_ = new ::XmsgImAuthCfgLog(*from.log_);
  } else {
    log_ = NULL;
  }
  if (from.has_pubtcp()) {
    pubtcp_ = new ::XmsgImAuthCfgXscTcpServer(*from.pubtcp_);
  } else {
    pubtcp_ = NULL;
  }
  if (from.has_pubhttp()) {
    pubhttp_ = new ::XmsgImAuthCfgXscHttpServer(*from.pubhttp_);
  } else {
    pubhttp_ = NULL;
  }
  if (from.has_pubwebsocket()) {
    pubwebsocket_ = new ::XmsgImAuthCfgXscWebSocketServer(*from.pubwebsocket_);
  } else {
    pubwebsocket_ = NULL;
  }
  if (from.has_pubudp()) {
    pubudp_ = new ::XmsgImAuthCfgXscUdpServer(*from.pubudp_);
  } else {
    pubudp_ = NULL;
  }
  if (from.has_pubrudp()) {
    pubrudp_ = new ::XmsgImAuthCfgXscRudpServer(*from.pubrudp_);
  } else {
    pubrudp_ = NULL;
  }
  if (from.has_pritcp()) {
    pritcp_ = new ::XmsgImAuthCfgXscTcpServer(*from.pritcp_);
  } else {
    pritcp_ = NULL;
  }
  if (from.has_misc()) {
    misc_ = new ::XmsgImAuthCfgMisc(*from.misc_);
  } else {
    misc_ = NULL;
  }
  ::memcpy(&gts_, &from.gts_,
    static_cast<size_t>(reinterpret_cast<char*>(&uts_) -
    reinterpret_cast<char*>(&gts_)) + sizeof(uts_));
  // @@protoc_insertion_point(copy_constructor:XmsgImAuthCfgPb)
}

void XmsgImAuthCfgPb::SharedCtor() {
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfgtype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mongodb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uts_) -
      reinterpret_cast<char*>(&mongodb_)) + sizeof(uts_));
  _cached_size_ = 0;
}

XmsgImAuthCfgPb::~XmsgImAuthCfgPb() {
  // @@protoc_insertion_point(destructor:XmsgImAuthCfgPb)
  SharedDtor();
}

void XmsgImAuthCfgPb::SharedDtor() {
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfgtype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mongodb_;
  if (this != internal_default_instance()) delete mysql_;
  if (this != internal_default_instance()) delete log_;
  if (this != internal_default_instance()) delete pubtcp_;
  if (this != internal_default_instance()) delete pubhttp_;
  if (this != internal_default_instance()) delete pubwebsocket_;
  if (this != internal_default_instance()) delete pubudp_;
  if (this != internal_default_instance()) delete pubrudp_;
  if (this != internal_default_instance()) delete pritcp_;
  if (this != internal_default_instance()) delete misc_;
}

void XmsgImAuthCfgPb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImAuthCfgPb::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImAuthCfgPb& XmsgImAuthCfgPb::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgPb();
  return *internal_default_instance();
}

XmsgImAuthCfgPb* XmsgImAuthCfgPb::New(::google::protobuf::Arena* arena) const {
  XmsgImAuthCfgPb* n = new XmsgImAuthCfgPb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImAuthCfgPb::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImAuthCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  h2n_.Clear();
  n2h_.Clear();
  kafkaprod_.Clear();
  xmsgapserviceaddr_.Clear();
  xmsgossserviceaddr_.Clear();
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfgtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && mongodb_ != NULL) {
    delete mongodb_;
  }
  mongodb_ = NULL;
  if (GetArenaNoVirtual() == NULL && mysql_ != NULL) {
    delete mysql_;
  }
  mysql_ = NULL;
  if (GetArenaNoVirtual() == NULL && log_ != NULL) {
    delete log_;
  }
  log_ = NULL;
  if (GetArenaNoVirtual() == NULL && pubtcp_ != NULL) {
    delete pubtcp_;
  }
  pubtcp_ = NULL;
  if (GetArenaNoVirtual() == NULL && pubhttp_ != NULL) {
    delete pubhttp_;
  }
  pubhttp_ = NULL;
  if (GetArenaNoVirtual() == NULL && pubwebsocket_ != NULL) {
    delete pubwebsocket_;
  }
  pubwebsocket_ = NULL;
  if (GetArenaNoVirtual() == NULL && pubudp_ != NULL) {
    delete pubudp_;
  }
  pubudp_ = NULL;
  if (GetArenaNoVirtual() == NULL && pubrudp_ != NULL) {
    delete pubrudp_;
  }
  pubrudp_ = NULL;
  if (GetArenaNoVirtual() == NULL && pritcp_ != NULL) {
    delete pritcp_;
  }
  pritcp_ = NULL;
  if (GetArenaNoVirtual() == NULL && misc_ != NULL) {
    delete misc_;
  }
  misc_ = NULL;
  ::memset(&gts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uts_) -
      reinterpret_cast<char*>(&gts_)) + sizeof(uts_));
  _internal_metadata_.Clear();
}

bool XmsgImAuthCfgPb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImAuthCfgPb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string cgt = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgPb.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cfgType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfgtype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cfgtype().data(), static_cast<int>(this->cfgtype().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgPb.cfgType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImAuthCfgMongodb mongodb = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mongodb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImAuthCfgMysql mysql = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mysql()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImAuthCfgLog log = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImAuthCfgXscTcpServer pubTcp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pubtcp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImAuthCfgXscHttpServer pubHttp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pubhttp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImAuthCfgXscWebSocketServer pubWebSocket = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pubwebsocket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImAuthCfgXscUdpServer pubUdp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pubudp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImAuthCfgXscRudpServer pubRudp = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pubrudp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImAuthCfgXscTcpServer priTcp = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pritcp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XmsgImAuthCfgXmsgNeH2nAddr h2n = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_h2n()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XmsgImAuthCfgXmsgNeN2hAddr n2h = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_n2h()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .XmsgImAuthCfgMisc misc = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_misc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> kafkaProd = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&kafkaprod_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgPb.KafkaProdEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgPb.KafkaProdEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 gts = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uts = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .XmsgImAuthPubService> xmsgApServiceAddr = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse,
              ::std::string, ::XmsgImAuthPubService,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService > > parser(&xmsgapserviceaddr_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgPb.XmsgApServiceAddrEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .XmsgImAuthPubService> xmsgOssServiceAddr = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse,
              ::std::string, ::XmsgImAuthPubService,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService > > parser(&xmsgossserviceaddr_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgPb.XmsgOssServiceAddrEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImAuthCfgPb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImAuthCfgPb)
  return false;
#undef DO_
}

void XmsgImAuthCfgPb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImAuthCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgPb.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cgt(), output);
  }

  // string cfgType = 2;
  if (this->cfgtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cfgtype().data(), static_cast<int>(this->cfgtype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgPb.cfgType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cfgtype(), output);
  }

  // .XmsgImAuthCfgMongodb mongodb = 3;
  if (this->has_mongodb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->mongodb_, output);
  }

  // .XmsgImAuthCfgMysql mysql = 4;
  if (this->has_mysql()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->mysql_, output);
  }

  // .XmsgImAuthCfgLog log = 5;
  if (this->has_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->log_, output);
  }

  // .XmsgImAuthCfgXscTcpServer pubTcp = 6;
  if (this->has_pubtcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->pubtcp_, output);
  }

  // .XmsgImAuthCfgXscHttpServer pubHttp = 7;
  if (this->has_pubhttp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->pubhttp_, output);
  }

  // .XmsgImAuthCfgXscWebSocketServer pubWebSocket = 8;
  if (this->has_pubwebsocket()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->pubwebsocket_, output);
  }

  // .XmsgImAuthCfgXscUdpServer pubUdp = 9;
  if (this->has_pubudp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->pubudp_, output);
  }

  // .XmsgImAuthCfgXscRudpServer pubRudp = 10;
  if (this->has_pubrudp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->pubrudp_, output);
  }

  // .XmsgImAuthCfgXscTcpServer priTcp = 11;
  if (this->has_pritcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->pritcp_, output);
  }

  // repeated .XmsgImAuthCfgXmsgNeH2nAddr h2n = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->h2n_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->h2n(static_cast<int>(i)), output);
  }

  // repeated .XmsgImAuthCfgXmsgNeN2hAddr n2h = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->n2h_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->n2h(static_cast<int>(i)), output);
  }

  // .XmsgImAuthCfgMisc misc = 14;
  if (this->has_misc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->misc_, output);
  }

  // map<string, string> kafkaProd = 15;
  if (!this->kafkaprod().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImAuthCfgPb.KafkaProdEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImAuthCfgPb.KafkaProdEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->kafkaprod().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->kafkaprod().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->kafkaprod().begin();
          it != this->kafkaprod().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kafkaprod_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->kafkaprod().begin();
          it != this->kafkaprod().end(); ++it) {
        entry.reset(kafkaprod_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // uint64 gts = 16;
  if (this->gts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->gts(), output);
  }

  // uint64 uts = 17;
  if (this->uts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->uts(), output);
  }

  // map<string, .XmsgImAuthPubService> xmsgApServiceAddr = 18;
  if (!this->xmsgapserviceaddr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImAuthCfgPb.XmsgApServiceAddrEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->xmsgapserviceaddr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->xmsgapserviceaddr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >::const_iterator
          it = this->xmsgapserviceaddr().begin();
          it != this->xmsgapserviceaddr().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(xmsgapserviceaddr_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            18, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >::const_iterator
          it = this->xmsgapserviceaddr().begin();
          it != this->xmsgapserviceaddr().end(); ++it) {
        entry.reset(xmsgapserviceaddr_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            18, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .XmsgImAuthPubService> xmsgOssServiceAddr = 19;
  if (!this->xmsgossserviceaddr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImAuthCfgPb.XmsgOssServiceAddrEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->xmsgossserviceaddr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->xmsgossserviceaddr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >::const_iterator
          it = this->xmsgossserviceaddr().begin();
          it != this->xmsgossserviceaddr().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(xmsgossserviceaddr_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            19, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >::const_iterator
          it = this->xmsgossserviceaddr().begin();
          it != this->xmsgossserviceaddr().end(); ++it) {
        entry.reset(xmsgossserviceaddr_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            19, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImAuthCfgPb)
}

::google::protobuf::uint8* XmsgImAuthCfgPb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImAuthCfgPb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgPb.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cgt(), target);
  }

  // string cfgType = 2;
  if (this->cfgtype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cfgtype().data(), static_cast<int>(this->cfgtype().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgPb.cfgType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cfgtype(), target);
  }

  // .XmsgImAuthCfgMongodb mongodb = 3;
  if (this->has_mongodb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->mongodb_, deterministic, target);
  }

  // .XmsgImAuthCfgMysql mysql = 4;
  if (this->has_mysql()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->mysql_, deterministic, target);
  }

  // .XmsgImAuthCfgLog log = 5;
  if (this->has_log()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->log_, deterministic, target);
  }

  // .XmsgImAuthCfgXscTcpServer pubTcp = 6;
  if (this->has_pubtcp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->pubtcp_, deterministic, target);
  }

  // .XmsgImAuthCfgXscHttpServer pubHttp = 7;
  if (this->has_pubhttp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->pubhttp_, deterministic, target);
  }

  // .XmsgImAuthCfgXscWebSocketServer pubWebSocket = 8;
  if (this->has_pubwebsocket()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->pubwebsocket_, deterministic, target);
  }

  // .XmsgImAuthCfgXscUdpServer pubUdp = 9;
  if (this->has_pubudp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->pubudp_, deterministic, target);
  }

  // .XmsgImAuthCfgXscRudpServer pubRudp = 10;
  if (this->has_pubrudp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->pubrudp_, deterministic, target);
  }

  // .XmsgImAuthCfgXscTcpServer priTcp = 11;
  if (this->has_pritcp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->pritcp_, deterministic, target);
  }

  // repeated .XmsgImAuthCfgXmsgNeH2nAddr h2n = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->h2n_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->h2n(static_cast<int>(i)), deterministic, target);
  }

  // repeated .XmsgImAuthCfgXmsgNeN2hAddr n2h = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->n2h_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->n2h(static_cast<int>(i)), deterministic, target);
  }

  // .XmsgImAuthCfgMisc misc = 14;
  if (this->has_misc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *this->misc_, deterministic, target);
  }

  // map<string, string> kafkaProd = 15;
  if (!this->kafkaprod().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImAuthCfgPb.KafkaProdEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImAuthCfgPb.KafkaProdEntry.value");
      }
    };

    if (deterministic &&
        this->kafkaprod().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->kafkaprod().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->kafkaprod().begin();
          it != this->kafkaprod().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kafkaprod_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->kafkaprod().begin();
          it != this->kafkaprod().end(); ++it) {
        entry.reset(kafkaprod_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // uint64 gts = 16;
  if (this->gts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->gts(), target);
  }

  // uint64 uts = 17;
  if (this->uts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->uts(), target);
  }

  // map<string, .XmsgImAuthPubService> xmsgApServiceAddr = 18;
  if (!this->xmsgapserviceaddr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImAuthCfgPb.XmsgApServiceAddrEntry.key");
      }
    };

    if (deterministic &&
        this->xmsgapserviceaddr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->xmsgapserviceaddr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >::const_iterator
          it = this->xmsgapserviceaddr().begin();
          it != this->xmsgapserviceaddr().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(xmsgapserviceaddr_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       18, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >::const_iterator
          it = this->xmsgapserviceaddr().begin();
          it != this->xmsgapserviceaddr().end(); ++it) {
        entry.reset(xmsgapserviceaddr_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       18, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .XmsgImAuthPubService> xmsgOssServiceAddr = 19;
  if (!this->xmsgossserviceaddr().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "XmsgImAuthCfgPb.XmsgOssServiceAddrEntry.key");
      }
    };

    if (deterministic &&
        this->xmsgossserviceaddr().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->xmsgossserviceaddr().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >::const_iterator
          it = this->xmsgossserviceaddr().begin();
          it != this->xmsgossserviceaddr().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(xmsgossserviceaddr_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       19, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >::const_iterator
          it = this->xmsgossserviceaddr().begin();
          it != this->xmsgossserviceaddr().end(); ++it) {
        entry.reset(xmsgossserviceaddr_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       19, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImAuthCfgPb)
  return target;
}

size_t XmsgImAuthCfgPb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImAuthCfgPb)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .XmsgImAuthCfgXmsgNeH2nAddr h2n = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->h2n_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->h2n(static_cast<int>(i)));
    }
  }

  // repeated .XmsgImAuthCfgXmsgNeN2hAddr n2h = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->n2h_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->n2h(static_cast<int>(i)));
    }
  }

  // map<string, string> kafkaProd = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->kafkaprod_size());
  {
    ::google::protobuf::scoped_ptr<XmsgImAuthCfgPb_KafkaProdEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->kafkaprod().begin();
        it != this->kafkaprod().end(); ++it) {
      entry.reset(kafkaprod_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .XmsgImAuthPubService> xmsgApServiceAddr = 18;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->xmsgapserviceaddr_size());
  {
    ::google::protobuf::scoped_ptr<XmsgImAuthCfgPb_XmsgApServiceAddrEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >::const_iterator
        it = this->xmsgapserviceaddr().begin();
        it != this->xmsgapserviceaddr().end(); ++it) {
      entry.reset(xmsgapserviceaddr_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .XmsgImAuthPubService> xmsgOssServiceAddr = 19;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->xmsgossserviceaddr_size());
  {
    ::google::protobuf::scoped_ptr<XmsgImAuthCfgPb_XmsgOssServiceAddrEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::XmsgImAuthPubService >::const_iterator
        it = this->xmsgossserviceaddr().begin();
        it != this->xmsgossserviceaddr().end(); ++it) {
      entry.reset(xmsgossserviceaddr_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string cgt = 1;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // string cfgType = 2;
  if (this->cfgtype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cfgtype());
  }

  // .XmsgImAuthCfgMongodb mongodb = 3;
  if (this->has_mongodb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mongodb_);
  }

  // .XmsgImAuthCfgMysql mysql = 4;
  if (this->has_mysql()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->mysql_);
  }

  // .XmsgImAuthCfgLog log = 5;
  if (this->has_log()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->log_);
  }

  // .XmsgImAuthCfgXscTcpServer pubTcp = 6;
  if (this->has_pubtcp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pubtcp_);
  }

  // .XmsgImAuthCfgXscHttpServer pubHttp = 7;
  if (this->has_pubhttp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pubhttp_);
  }

  // .XmsgImAuthCfgXscWebSocketServer pubWebSocket = 8;
  if (this->has_pubwebsocket()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pubwebsocket_);
  }

  // .XmsgImAuthCfgXscUdpServer pubUdp = 9;
  if (this->has_pubudp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pubudp_);
  }

  // .XmsgImAuthCfgXscRudpServer pubRudp = 10;
  if (this->has_pubrudp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pubrudp_);
  }

  // .XmsgImAuthCfgXscTcpServer priTcp = 11;
  if (this->has_pritcp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pritcp_);
  }

  // .XmsgImAuthCfgMisc misc = 14;
  if (this->has_misc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->misc_);
  }

  // uint64 gts = 16;
  if (this->gts() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->gts());
  }

  // uint64 uts = 17;
  if (this->uts() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImAuthCfgPb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImAuthCfgPb)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImAuthCfgPb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImAuthCfgPb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImAuthCfgPb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImAuthCfgPb)
    MergeFrom(*source);
  }
}

void XmsgImAuthCfgPb::MergeFrom(const XmsgImAuthCfgPb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImAuthCfgPb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  h2n_.MergeFrom(from.h2n_);
  n2h_.MergeFrom(from.n2h_);
  kafkaprod_.MergeFrom(from.kafkaprod_);
  xmsgapserviceaddr_.MergeFrom(from.xmsgapserviceaddr_);
  xmsgossserviceaddr_.MergeFrom(from.xmsgossserviceaddr_);
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.cfgtype().size() > 0) {

    cfgtype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cfgtype_);
  }
  if (from.has_mongodb()) {
    mutable_mongodb()->::XmsgImAuthCfgMongodb::MergeFrom(from.mongodb());
  }
  if (from.has_mysql()) {
    mutable_mysql()->::XmsgImAuthCfgMysql::MergeFrom(from.mysql());
  }
  if (from.has_log()) {
    mutable_log()->::XmsgImAuthCfgLog::MergeFrom(from.log());
  }
  if (from.has_pubtcp()) {
    mutable_pubtcp()->::XmsgImAuthCfgXscTcpServer::MergeFrom(from.pubtcp());
  }
  if (from.has_pubhttp()) {
    mutable_pubhttp()->::XmsgImAuthCfgXscHttpServer::MergeFrom(from.pubhttp());
  }
  if (from.has_pubwebsocket()) {
    mutable_pubwebsocket()->::XmsgImAuthCfgXscWebSocketServer::MergeFrom(from.pubwebsocket());
  }
  if (from.has_pubudp()) {
    mutable_pubudp()->::XmsgImAuthCfgXscUdpServer::MergeFrom(from.pubudp());
  }
  if (from.has_pubrudp()) {
    mutable_pubrudp()->::XmsgImAuthCfgXscRudpServer::MergeFrom(from.pubrudp());
  }
  if (from.has_pritcp()) {
    mutable_pritcp()->::XmsgImAuthCfgXscTcpServer::MergeFrom(from.pritcp());
  }
  if (from.has_misc()) {
    mutable_misc()->::XmsgImAuthCfgMisc::MergeFrom(from.misc());
  }
  if (from.gts() != 0) {
    set_gts(from.gts());
  }
  if (from.uts() != 0) {
    set_uts(from.uts());
  }
}

void XmsgImAuthCfgPb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImAuthCfgPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImAuthCfgPb::CopyFrom(const XmsgImAuthCfgPb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImAuthCfgPb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImAuthCfgPb::IsInitialized() const {
  return true;
}

void XmsgImAuthCfgPb::Swap(XmsgImAuthCfgPb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImAuthCfgPb::InternalSwap(XmsgImAuthCfgPb* other) {
  using std::swap;
  h2n_.InternalSwap(&other->h2n_);
  n2h_.InternalSwap(&other->n2h_);
  kafkaprod_.Swap(&other->kafkaprod_);
  xmsgapserviceaddr_.Swap(&other->xmsgapserviceaddr_);
  xmsgossserviceaddr_.Swap(&other->xmsgossserviceaddr_);
  cgt_.Swap(&other->cgt_);
  cfgtype_.Swap(&other->cfgtype_);
  swap(mongodb_, other->mongodb_);
  swap(mysql_, other->mysql_);
  swap(log_, other->log_);
  swap(pubtcp_, other->pubtcp_);
  swap(pubhttp_, other->pubhttp_);
  swap(pubwebsocket_, other->pubwebsocket_);
  swap(pubudp_, other->pubudp_);
  swap(pubrudp_, other->pubrudp_);
  swap(pritcp_, other->pritcp_);
  swap(misc_, other->misc_);
  swap(gts_, other->gts_);
  swap(uts_, other->uts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImAuthCfgPb::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImAuthCfgMongodb::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImAuthCfgMongodb::kUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImAuthCfgMongodb::XmsgImAuthCfgMongodb()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgMongodb();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImAuthCfgMongodb)
}
XmsgImAuthCfgMongodb::XmsgImAuthCfgMongodb(const XmsgImAuthCfgMongodb& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uri().size() > 0) {
    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImAuthCfgMongodb)
}

void XmsgImAuthCfgMongodb::SharedCtor() {
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImAuthCfgMongodb::~XmsgImAuthCfgMongodb() {
  // @@protoc_insertion_point(destructor:XmsgImAuthCfgMongodb)
  SharedDtor();
}

void XmsgImAuthCfgMongodb::SharedDtor() {
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImAuthCfgMongodb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImAuthCfgMongodb::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImAuthCfgMongodb& XmsgImAuthCfgMongodb::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgMongodb();
  return *internal_default_instance();
}

XmsgImAuthCfgMongodb* XmsgImAuthCfgMongodb::New(::google::protobuf::Arena* arena) const {
  XmsgImAuthCfgMongodb* n = new XmsgImAuthCfgMongodb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImAuthCfgMongodb::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImAuthCfgMongodb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImAuthCfgMongodb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImAuthCfgMongodb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgMongodb.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImAuthCfgMongodb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImAuthCfgMongodb)
  return false;
#undef DO_
}

void XmsgImAuthCfgMongodb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImAuthCfgMongodb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgMongodb.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImAuthCfgMongodb)
}

::google::protobuf::uint8* XmsgImAuthCfgMongodb::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImAuthCfgMongodb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgMongodb.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImAuthCfgMongodb)
  return target;
}

size_t XmsgImAuthCfgMongodb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImAuthCfgMongodb)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string uri = 1;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uri());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImAuthCfgMongodb::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImAuthCfgMongodb)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImAuthCfgMongodb* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImAuthCfgMongodb>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImAuthCfgMongodb)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImAuthCfgMongodb)
    MergeFrom(*source);
  }
}

void XmsgImAuthCfgMongodb::MergeFrom(const XmsgImAuthCfgMongodb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImAuthCfgMongodb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
}

void XmsgImAuthCfgMongodb::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImAuthCfgMongodb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImAuthCfgMongodb::CopyFrom(const XmsgImAuthCfgMongodb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImAuthCfgMongodb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImAuthCfgMongodb::IsInitialized() const {
  return true;
}

void XmsgImAuthCfgMongodb::Swap(XmsgImAuthCfgMongodb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImAuthCfgMongodb::InternalSwap(XmsgImAuthCfgMongodb* other) {
  using std::swap;
  uri_.Swap(&other->uri_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImAuthCfgMongodb::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImAuthCfgMysql::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImAuthCfgMysql::kHostFieldNumber;
const int XmsgImAuthCfgMysql::kPortFieldNumber;
const int XmsgImAuthCfgMysql::kDbFieldNumber;
const int XmsgImAuthCfgMysql::kUsrFieldNumber;
const int XmsgImAuthCfgMysql::kPasswordFieldNumber;
const int XmsgImAuthCfgMysql::kPoolSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImAuthCfgMysql::XmsgImAuthCfgMysql()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgMysql();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImAuthCfgMysql)
}
XmsgImAuthCfgMysql::XmsgImAuthCfgMysql(const XmsgImAuthCfgMysql& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.db().size() > 0) {
    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  usr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.usr().size() > 0) {
    usr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usr_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&poolsize_) -
    reinterpret_cast<char*>(&port_)) + sizeof(poolsize_));
  // @@protoc_insertion_point(copy_constructor:XmsgImAuthCfgMysql)
}

void XmsgImAuthCfgMysql::SharedCtor() {
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poolsize_) -
      reinterpret_cast<char*>(&port_)) + sizeof(poolsize_));
  _cached_size_ = 0;
}

XmsgImAuthCfgMysql::~XmsgImAuthCfgMysql() {
  // @@protoc_insertion_point(destructor:XmsgImAuthCfgMysql)
  SharedDtor();
}

void XmsgImAuthCfgMysql::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImAuthCfgMysql::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImAuthCfgMysql::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImAuthCfgMysql& XmsgImAuthCfgMysql::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgMysql();
  return *internal_default_instance();
}

XmsgImAuthCfgMysql* XmsgImAuthCfgMysql::New(::google::protobuf::Arena* arena) const {
  XmsgImAuthCfgMysql* n = new XmsgImAuthCfgMysql;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImAuthCfgMysql::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImAuthCfgMysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  usr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poolsize_) -
      reinterpret_cast<char*>(&port_)) + sizeof(poolsize_));
  _internal_metadata_.Clear();
}

bool XmsgImAuthCfgMysql::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImAuthCfgMysql)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgMysql.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string db = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->db().data(), static_cast<int>(this->db().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgMysql.db"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string usr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->usr().data(), static_cast<int>(this->usr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgMysql.usr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgMysql.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 poolSize = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poolsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImAuthCfgMysql)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImAuthCfgMysql)
  return false;
#undef DO_
}

void XmsgImAuthCfgMysql::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImAuthCfgMysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgMysql.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // string db = 3;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgMysql.db");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->db(), output);
  }

  // string usr = 4;
  if (this->usr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usr().data(), static_cast<int>(this->usr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgMysql.usr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->usr(), output);
  }

  // string password = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgMysql.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->password(), output);
  }

  // uint32 poolSize = 6;
  if (this->poolsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->poolsize(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImAuthCfgMysql)
}

::google::protobuf::uint8* XmsgImAuthCfgMysql::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImAuthCfgMysql)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgMysql.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // string db = 3;
  if (this->db().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgMysql.db");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->db(), target);
  }

  // string usr = 4;
  if (this->usr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->usr().data(), static_cast<int>(this->usr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgMysql.usr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->usr(), target);
  }

  // string password = 5;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgMysql.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->password(), target);
  }

  // uint32 poolSize = 6;
  if (this->poolsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->poolsize(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImAuthCfgMysql)
  return target;
}

size_t XmsgImAuthCfgMysql::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImAuthCfgMysql)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string db = 3;
  if (this->db().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db());
  }

  // string usr = 4;
  if (this->usr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->usr());
  }

  // string password = 5;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint32 poolSize = 6;
  if (this->poolsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->poolsize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImAuthCfgMysql::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImAuthCfgMysql)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImAuthCfgMysql* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImAuthCfgMysql>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImAuthCfgMysql)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImAuthCfgMysql)
    MergeFrom(*source);
  }
}

void XmsgImAuthCfgMysql::MergeFrom(const XmsgImAuthCfgMysql& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImAuthCfgMysql)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.db().size() > 0) {

    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  if (from.usr().size() > 0) {

    usr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.usr_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.poolsize() != 0) {
    set_poolsize(from.poolsize());
  }
}

void XmsgImAuthCfgMysql::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImAuthCfgMysql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImAuthCfgMysql::CopyFrom(const XmsgImAuthCfgMysql& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImAuthCfgMysql)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImAuthCfgMysql::IsInitialized() const {
  return true;
}

void XmsgImAuthCfgMysql::Swap(XmsgImAuthCfgMysql* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImAuthCfgMysql::InternalSwap(XmsgImAuthCfgMysql* other) {
  using std::swap;
  host_.Swap(&other->host_);
  db_.Swap(&other->db_);
  usr_.Swap(&other->usr_);
  password_.Swap(&other->password_);
  swap(port_, other->port_);
  swap(poolsize_, other->poolsize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImAuthCfgMysql::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImAuthCfgLog::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImAuthCfgLog::kLevelFieldNumber;
const int XmsgImAuthCfgLog::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImAuthCfgLog::XmsgImAuthCfgLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgLog();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImAuthCfgLog)
}
XmsgImAuthCfgLog::XmsgImAuthCfgLog(const XmsgImAuthCfgLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.level().size() > 0) {
    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
  output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.output().size() > 0) {
    output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImAuthCfgLog)
}

void XmsgImAuthCfgLog::SharedCtor() {
  level_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImAuthCfgLog::~XmsgImAuthCfgLog() {
  // @@protoc_insertion_point(destructor:XmsgImAuthCfgLog)
  SharedDtor();
}

void XmsgImAuthCfgLog::SharedDtor() {
  level_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImAuthCfgLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImAuthCfgLog::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImAuthCfgLog& XmsgImAuthCfgLog::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgLog();
  return *internal_default_instance();
}

XmsgImAuthCfgLog* XmsgImAuthCfgLog::New(::google::protobuf::Arena* arena) const {
  XmsgImAuthCfgLog* n = new XmsgImAuthCfgLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImAuthCfgLog::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImAuthCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImAuthCfgLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImAuthCfgLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_level()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->level().data(), static_cast<int>(this->level().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgLog.level"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->output().data(), static_cast<int>(this->output().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgLog.output"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImAuthCfgLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImAuthCfgLog)
  return false;
#undef DO_
}

void XmsgImAuthCfgLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImAuthCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string level = 1;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), static_cast<int>(this->level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgLog.level");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->level(), output);
  }

  // string output = 2;
  if (this->output().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output().data(), static_cast<int>(this->output().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgLog.output");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->output(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImAuthCfgLog)
}

::google::protobuf::uint8* XmsgImAuthCfgLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImAuthCfgLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string level = 1;
  if (this->level().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->level().data(), static_cast<int>(this->level().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgLog.level");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->level(), target);
  }

  // string output = 2;
  if (this->output().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->output().data(), static_cast<int>(this->output().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgLog.output");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->output(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImAuthCfgLog)
  return target;
}

size_t XmsgImAuthCfgLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImAuthCfgLog)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string level = 1;
  if (this->level().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->level());
  }

  // string output = 2;
  if (this->output().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImAuthCfgLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImAuthCfgLog)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImAuthCfgLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImAuthCfgLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImAuthCfgLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImAuthCfgLog)
    MergeFrom(*source);
  }
}

void XmsgImAuthCfgLog::MergeFrom(const XmsgImAuthCfgLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImAuthCfgLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level().size() > 0) {

    level_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.level_);
  }
  if (from.output().size() > 0) {

    output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
}

void XmsgImAuthCfgLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImAuthCfgLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImAuthCfgLog::CopyFrom(const XmsgImAuthCfgLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImAuthCfgLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImAuthCfgLog::IsInitialized() const {
  return true;
}

void XmsgImAuthCfgLog::Swap(XmsgImAuthCfgLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImAuthCfgLog::InternalSwap(XmsgImAuthCfgLog* other) {
  using std::swap;
  level_.Swap(&other->level_);
  output_.Swap(&other->output_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImAuthCfgLog::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImAuthCfgXscTcpServer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImAuthCfgXscTcpServer::kAddrFieldNumber;
const int XmsgImAuthCfgXscTcpServer::kWorkerFieldNumber;
const int XmsgImAuthCfgXscTcpServer::kPeerLimitFieldNumber;
const int XmsgImAuthCfgXscTcpServer::kPeerMtuFieldNumber;
const int XmsgImAuthCfgXscTcpServer::kPeerRcvBufFieldNumber;
const int XmsgImAuthCfgXscTcpServer::kPeerSndBufFieldNumber;
const int XmsgImAuthCfgXscTcpServer::kLazyCloseFieldNumber;
const int XmsgImAuthCfgXscTcpServer::kTracingFieldNumber;
const int XmsgImAuthCfgXscTcpServer::kHeartbeatFieldNumber;
const int XmsgImAuthCfgXscTcpServer::kN2HZombieFieldNumber;
const int XmsgImAuthCfgXscTcpServer::kN2HTransTimeoutFieldNumber;
const int XmsgImAuthCfgXscTcpServer::kN2HTracingFieldNumber;
const int XmsgImAuthCfgXscTcpServer::kH2NReConnFieldNumber;
const int XmsgImAuthCfgXscTcpServer::kH2NTransTimeoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImAuthCfgXscTcpServer::XmsgImAuthCfgXscTcpServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscTcpServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImAuthCfgXscTcpServer)
}
XmsgImAuthCfgXscTcpServer::XmsgImAuthCfgXscTcpServer(const XmsgImAuthCfgXscTcpServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  ::memcpy(&worker_, &from.worker_,
    static_cast<size_t>(reinterpret_cast<char*>(&h2ntranstimeout_) -
    reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  // @@protoc_insertion_point(copy_constructor:XmsgImAuthCfgXscTcpServer)
}

void XmsgImAuthCfgXscTcpServer::SharedCtor() {
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&worker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h2ntranstimeout_) -
      reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  _cached_size_ = 0;
}

XmsgImAuthCfgXscTcpServer::~XmsgImAuthCfgXscTcpServer() {
  // @@protoc_insertion_point(destructor:XmsgImAuthCfgXscTcpServer)
  SharedDtor();
}

void XmsgImAuthCfgXscTcpServer::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImAuthCfgXscTcpServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImAuthCfgXscTcpServer::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImAuthCfgXscTcpServer& XmsgImAuthCfgXscTcpServer::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscTcpServer();
  return *internal_default_instance();
}

XmsgImAuthCfgXscTcpServer* XmsgImAuthCfgXscTcpServer::New(::google::protobuf::Arena* arena) const {
  XmsgImAuthCfgXscTcpServer* n = new XmsgImAuthCfgXscTcpServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImAuthCfgXscTcpServer::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImAuthCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&worker_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h2ntranstimeout_) -
      reinterpret_cast<char*>(&worker_)) + sizeof(h2ntranstimeout_));
  _internal_metadata_.Clear();
}

bool XmsgImAuthCfgXscTcpServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImAuthCfgXscTcpServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgXscTcpServer.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 worker = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerLimit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peerlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerMtu = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peermtu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerRcvBuf = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peerrcvbuf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 peerSndBuf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peersndbuf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lazyClose = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lazyclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool tracing = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tracing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 heartbeat = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 n2hZombie = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n2hzombie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 n2hTransTimeout = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n2htranstimeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool n2hTracing = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &n2htracing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 h2nReConn = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h2nreconn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 h2nTransTimeout = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h2ntranstimeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImAuthCfgXscTcpServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImAuthCfgXscTcpServer)
  return false;
#undef DO_
}

void XmsgImAuthCfgXscTcpServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImAuthCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXscTcpServer.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->worker(), output);
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->peerlimit(), output);
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->peermtu(), output);
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->peerrcvbuf(), output);
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->peersndbuf(), output);
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lazyclose(), output);
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->tracing(), output);
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->heartbeat(), output);
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->n2hzombie(), output);
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->n2htranstimeout(), output);
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->n2htracing(), output);
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->h2nreconn(), output);
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->h2ntranstimeout(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImAuthCfgXscTcpServer)
}

::google::protobuf::uint8* XmsgImAuthCfgXscTcpServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImAuthCfgXscTcpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXscTcpServer.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->worker(), target);
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->peerlimit(), target);
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->peermtu(), target);
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->peerrcvbuf(), target);
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->peersndbuf(), target);
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lazyclose(), target);
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->tracing(), target);
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->heartbeat(), target);
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->n2hzombie(), target);
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->n2htranstimeout(), target);
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->n2htracing(), target);
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->h2nreconn(), target);
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->h2ntranstimeout(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImAuthCfgXscTcpServer)
  return target;
}

size_t XmsgImAuthCfgXscTcpServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImAuthCfgXscTcpServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // uint32 worker = 2;
  if (this->worker() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->worker());
  }

  // uint32 peerLimit = 3;
  if (this->peerlimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peerlimit());
  }

  // uint32 peerMtu = 4;
  if (this->peermtu() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peermtu());
  }

  // uint32 peerRcvBuf = 5;
  if (this->peerrcvbuf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peerrcvbuf());
  }

  // uint32 peerSndBuf = 6;
  if (this->peersndbuf() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->peersndbuf());
  }

  // uint32 lazyClose = 7;
  if (this->lazyclose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lazyclose());
  }

  // uint32 heartbeat = 9;
  if (this->heartbeat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heartbeat());
  }

  // uint32 n2hZombie = 10;
  if (this->n2hzombie() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n2hzombie());
  }

  // bool tracing = 8;
  if (this->tracing() != 0) {
    total_size += 1 + 1;
  }

  // bool n2hTracing = 12;
  if (this->n2htracing() != 0) {
    total_size += 1 + 1;
  }

  // uint32 n2hTransTimeout = 11;
  if (this->n2htranstimeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n2htranstimeout());
  }

  // uint32 h2nReConn = 13;
  if (this->h2nreconn() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->h2nreconn());
  }

  // uint32 h2nTransTimeout = 14;
  if (this->h2ntranstimeout() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->h2ntranstimeout());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImAuthCfgXscTcpServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImAuthCfgXscTcpServer)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImAuthCfgXscTcpServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImAuthCfgXscTcpServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImAuthCfgXscTcpServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImAuthCfgXscTcpServer)
    MergeFrom(*source);
  }
}

void XmsgImAuthCfgXscTcpServer::MergeFrom(const XmsgImAuthCfgXscTcpServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImAuthCfgXscTcpServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.worker() != 0) {
    set_worker(from.worker());
  }
  if (from.peerlimit() != 0) {
    set_peerlimit(from.peerlimit());
  }
  if (from.peermtu() != 0) {
    set_peermtu(from.peermtu());
  }
  if (from.peerrcvbuf() != 0) {
    set_peerrcvbuf(from.peerrcvbuf());
  }
  if (from.peersndbuf() != 0) {
    set_peersndbuf(from.peersndbuf());
  }
  if (from.lazyclose() != 0) {
    set_lazyclose(from.lazyclose());
  }
  if (from.heartbeat() != 0) {
    set_heartbeat(from.heartbeat());
  }
  if (from.n2hzombie() != 0) {
    set_n2hzombie(from.n2hzombie());
  }
  if (from.tracing() != 0) {
    set_tracing(from.tracing());
  }
  if (from.n2htracing() != 0) {
    set_n2htracing(from.n2htracing());
  }
  if (from.n2htranstimeout() != 0) {
    set_n2htranstimeout(from.n2htranstimeout());
  }
  if (from.h2nreconn() != 0) {
    set_h2nreconn(from.h2nreconn());
  }
  if (from.h2ntranstimeout() != 0) {
    set_h2ntranstimeout(from.h2ntranstimeout());
  }
}

void XmsgImAuthCfgXscTcpServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImAuthCfgXscTcpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImAuthCfgXscTcpServer::CopyFrom(const XmsgImAuthCfgXscTcpServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImAuthCfgXscTcpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImAuthCfgXscTcpServer::IsInitialized() const {
  return true;
}

void XmsgImAuthCfgXscTcpServer::Swap(XmsgImAuthCfgXscTcpServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImAuthCfgXscTcpServer::InternalSwap(XmsgImAuthCfgXscTcpServer* other) {
  using std::swap;
  addr_.Swap(&other->addr_);
  swap(worker_, other->worker_);
  swap(peerlimit_, other->peerlimit_);
  swap(peermtu_, other->peermtu_);
  swap(peerrcvbuf_, other->peerrcvbuf_);
  swap(peersndbuf_, other->peersndbuf_);
  swap(lazyclose_, other->lazyclose_);
  swap(heartbeat_, other->heartbeat_);
  swap(n2hzombie_, other->n2hzombie_);
  swap(tracing_, other->tracing_);
  swap(n2htracing_, other->n2htracing_);
  swap(n2htranstimeout_, other->n2htranstimeout_);
  swap(h2nreconn_, other->h2nreconn_);
  swap(h2ntranstimeout_, other->h2ntranstimeout_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImAuthCfgXscTcpServer::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImAuthCfgXscHttpServer::InitAsDefaultInstance() {
  ::_XmsgImAuthCfgXscHttpServer_default_instance_._instance.get_mutable()->tcp_ = const_cast< ::XmsgImAuthCfgXscTcpServer*>(
      ::XmsgImAuthCfgXscTcpServer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImAuthCfgXscHttpServer::kTcpFieldNumber;
const int XmsgImAuthCfgXscHttpServer::kHeaderLimitFieldNumber;
const int XmsgImAuthCfgXscHttpServer::kBodyLimitFieldNumber;
const int XmsgImAuthCfgXscHttpServer::kCloseWaitFieldNumber;
const int XmsgImAuthCfgXscHttpServer::kRequiredHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImAuthCfgXscHttpServer::XmsgImAuthCfgXscHttpServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscHttpServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImAuthCfgXscHttpServer)
}
XmsgImAuthCfgXscHttpServer::XmsgImAuthCfgXscHttpServer(const XmsgImAuthCfgXscHttpServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      requiredheader_(from.requiredheader_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tcp()) {
    tcp_ = new ::XmsgImAuthCfgXscTcpServer(*from.tcp_);
  } else {
    tcp_ = NULL;
  }
  ::memcpy(&headerlimit_, &from.headerlimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&closewait_) -
    reinterpret_cast<char*>(&headerlimit_)) + sizeof(closewait_));
  // @@protoc_insertion_point(copy_constructor:XmsgImAuthCfgXscHttpServer)
}

void XmsgImAuthCfgXscHttpServer::SharedCtor() {
  ::memset(&tcp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closewait_) -
      reinterpret_cast<char*>(&tcp_)) + sizeof(closewait_));
  _cached_size_ = 0;
}

XmsgImAuthCfgXscHttpServer::~XmsgImAuthCfgXscHttpServer() {
  // @@protoc_insertion_point(destructor:XmsgImAuthCfgXscHttpServer)
  SharedDtor();
}

void XmsgImAuthCfgXscHttpServer::SharedDtor() {
  if (this != internal_default_instance()) delete tcp_;
}

void XmsgImAuthCfgXscHttpServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImAuthCfgXscHttpServer::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImAuthCfgXscHttpServer& XmsgImAuthCfgXscHttpServer::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscHttpServer();
  return *internal_default_instance();
}

XmsgImAuthCfgXscHttpServer* XmsgImAuthCfgXscHttpServer::New(::google::protobuf::Arena* arena) const {
  XmsgImAuthCfgXscHttpServer* n = new XmsgImAuthCfgXscHttpServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImAuthCfgXscHttpServer::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImAuthCfgXscHttpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requiredheader_.Clear();
  if (GetArenaNoVirtual() == NULL && tcp_ != NULL) {
    delete tcp_;
  }
  tcp_ = NULL;
  ::memset(&headerlimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closewait_) -
      reinterpret_cast<char*>(&headerlimit_)) + sizeof(closewait_));
  _internal_metadata_.Clear();
}

bool XmsgImAuthCfgXscHttpServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImAuthCfgXscHttpServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .XmsgImAuthCfgXscTcpServer tcp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tcp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 headerLimit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headerlimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 bodyLimit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodylimit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 closeWait = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &closewait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string requiredHeader = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_requiredheader()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->requiredheader(this->requiredheader_size() - 1).data(),
            static_cast<int>(this->requiredheader(this->requiredheader_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgXscHttpServer.requiredHeader"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImAuthCfgXscHttpServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImAuthCfgXscHttpServer)
  return false;
#undef DO_
}

void XmsgImAuthCfgXscHttpServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImAuthCfgXscHttpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .XmsgImAuthCfgXscTcpServer tcp = 1;
  if (this->has_tcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tcp_, output);
  }

  // uint32 headerLimit = 2;
  if (this->headerlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->headerlimit(), output);
  }

  // uint32 bodyLimit = 3;
  if (this->bodylimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bodylimit(), output);
  }

  // uint32 closeWait = 4;
  if (this->closewait() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->closewait(), output);
  }

  // repeated string requiredHeader = 5;
  for (int i = 0, n = this->requiredheader_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requiredheader(i).data(), static_cast<int>(this->requiredheader(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXscHttpServer.requiredHeader");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->requiredheader(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImAuthCfgXscHttpServer)
}

::google::protobuf::uint8* XmsgImAuthCfgXscHttpServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImAuthCfgXscHttpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .XmsgImAuthCfgXscTcpServer tcp = 1;
  if (this->has_tcp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->tcp_, deterministic, target);
  }

  // uint32 headerLimit = 2;
  if (this->headerlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->headerlimit(), target);
  }

  // uint32 bodyLimit = 3;
  if (this->bodylimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bodylimit(), target);
  }

  // uint32 closeWait = 4;
  if (this->closewait() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->closewait(), target);
  }

  // repeated string requiredHeader = 5;
  for (int i = 0, n = this->requiredheader_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requiredheader(i).data(), static_cast<int>(this->requiredheader(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXscHttpServer.requiredHeader");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->requiredheader(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImAuthCfgXscHttpServer)
  return target;
}

size_t XmsgImAuthCfgXscHttpServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImAuthCfgXscHttpServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string requiredHeader = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->requiredheader_size());
  for (int i = 0, n = this->requiredheader_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->requiredheader(i));
  }

  // .XmsgImAuthCfgXscTcpServer tcp = 1;
  if (this->has_tcp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tcp_);
  }

  // uint32 headerLimit = 2;
  if (this->headerlimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->headerlimit());
  }

  // uint32 bodyLimit = 3;
  if (this->bodylimit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->bodylimit());
  }

  // uint32 closeWait = 4;
  if (this->closewait() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->closewait());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImAuthCfgXscHttpServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImAuthCfgXscHttpServer)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImAuthCfgXscHttpServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImAuthCfgXscHttpServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImAuthCfgXscHttpServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImAuthCfgXscHttpServer)
    MergeFrom(*source);
  }
}

void XmsgImAuthCfgXscHttpServer::MergeFrom(const XmsgImAuthCfgXscHttpServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImAuthCfgXscHttpServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requiredheader_.MergeFrom(from.requiredheader_);
  if (from.has_tcp()) {
    mutable_tcp()->::XmsgImAuthCfgXscTcpServer::MergeFrom(from.tcp());
  }
  if (from.headerlimit() != 0) {
    set_headerlimit(from.headerlimit());
  }
  if (from.bodylimit() != 0) {
    set_bodylimit(from.bodylimit());
  }
  if (from.closewait() != 0) {
    set_closewait(from.closewait());
  }
}

void XmsgImAuthCfgXscHttpServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImAuthCfgXscHttpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImAuthCfgXscHttpServer::CopyFrom(const XmsgImAuthCfgXscHttpServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImAuthCfgXscHttpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImAuthCfgXscHttpServer::IsInitialized() const {
  return true;
}

void XmsgImAuthCfgXscHttpServer::Swap(XmsgImAuthCfgXscHttpServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImAuthCfgXscHttpServer::InternalSwap(XmsgImAuthCfgXscHttpServer* other) {
  using std::swap;
  requiredheader_.InternalSwap(&other->requiredheader_);
  swap(tcp_, other->tcp_);
  swap(headerlimit_, other->headerlimit_);
  swap(bodylimit_, other->bodylimit_);
  swap(closewait_, other->closewait_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImAuthCfgXscHttpServer::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImAuthCfgXscWebSocketServer::InitAsDefaultInstance() {
  ::_XmsgImAuthCfgXscWebSocketServer_default_instance_._instance.get_mutable()->tcp_ = const_cast< ::XmsgImAuthCfgXscTcpServer*>(
      ::XmsgImAuthCfgXscTcpServer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImAuthCfgXscWebSocketServer::kTcpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImAuthCfgXscWebSocketServer::XmsgImAuthCfgXscWebSocketServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscWebSocketServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImAuthCfgXscWebSocketServer)
}
XmsgImAuthCfgXscWebSocketServer::XmsgImAuthCfgXscWebSocketServer(const XmsgImAuthCfgXscWebSocketServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tcp()) {
    tcp_ = new ::XmsgImAuthCfgXscTcpServer(*from.tcp_);
  } else {
    tcp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImAuthCfgXscWebSocketServer)
}

void XmsgImAuthCfgXscWebSocketServer::SharedCtor() {
  tcp_ = NULL;
  _cached_size_ = 0;
}

XmsgImAuthCfgXscWebSocketServer::~XmsgImAuthCfgXscWebSocketServer() {
  // @@protoc_insertion_point(destructor:XmsgImAuthCfgXscWebSocketServer)
  SharedDtor();
}

void XmsgImAuthCfgXscWebSocketServer::SharedDtor() {
  if (this != internal_default_instance()) delete tcp_;
}

void XmsgImAuthCfgXscWebSocketServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImAuthCfgXscWebSocketServer::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImAuthCfgXscWebSocketServer& XmsgImAuthCfgXscWebSocketServer::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscWebSocketServer();
  return *internal_default_instance();
}

XmsgImAuthCfgXscWebSocketServer* XmsgImAuthCfgXscWebSocketServer::New(::google::protobuf::Arena* arena) const {
  XmsgImAuthCfgXscWebSocketServer* n = new XmsgImAuthCfgXscWebSocketServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImAuthCfgXscWebSocketServer::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImAuthCfgXscWebSocketServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tcp_ != NULL) {
    delete tcp_;
  }
  tcp_ = NULL;
  _internal_metadata_.Clear();
}

bool XmsgImAuthCfgXscWebSocketServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImAuthCfgXscWebSocketServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .XmsgImAuthCfgXscTcpServer tcp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tcp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImAuthCfgXscWebSocketServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImAuthCfgXscWebSocketServer)
  return false;
#undef DO_
}

void XmsgImAuthCfgXscWebSocketServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImAuthCfgXscWebSocketServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .XmsgImAuthCfgXscTcpServer tcp = 1;
  if (this->has_tcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->tcp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImAuthCfgXscWebSocketServer)
}

::google::protobuf::uint8* XmsgImAuthCfgXscWebSocketServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImAuthCfgXscWebSocketServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .XmsgImAuthCfgXscTcpServer tcp = 1;
  if (this->has_tcp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->tcp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImAuthCfgXscWebSocketServer)
  return target;
}

size_t XmsgImAuthCfgXscWebSocketServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImAuthCfgXscWebSocketServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .XmsgImAuthCfgXscTcpServer tcp = 1;
  if (this->has_tcp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->tcp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImAuthCfgXscWebSocketServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImAuthCfgXscWebSocketServer)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImAuthCfgXscWebSocketServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImAuthCfgXscWebSocketServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImAuthCfgXscWebSocketServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImAuthCfgXscWebSocketServer)
    MergeFrom(*source);
  }
}

void XmsgImAuthCfgXscWebSocketServer::MergeFrom(const XmsgImAuthCfgXscWebSocketServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImAuthCfgXscWebSocketServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tcp()) {
    mutable_tcp()->::XmsgImAuthCfgXscTcpServer::MergeFrom(from.tcp());
  }
}

void XmsgImAuthCfgXscWebSocketServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImAuthCfgXscWebSocketServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImAuthCfgXscWebSocketServer::CopyFrom(const XmsgImAuthCfgXscWebSocketServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImAuthCfgXscWebSocketServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImAuthCfgXscWebSocketServer::IsInitialized() const {
  return true;
}

void XmsgImAuthCfgXscWebSocketServer::Swap(XmsgImAuthCfgXscWebSocketServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImAuthCfgXscWebSocketServer::InternalSwap(XmsgImAuthCfgXscWebSocketServer* other) {
  using std::swap;
  swap(tcp_, other->tcp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImAuthCfgXscWebSocketServer::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImAuthCfgXscUdpServer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImAuthCfgXscUdpServer::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImAuthCfgXscUdpServer::XmsgImAuthCfgXscUdpServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscUdpServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImAuthCfgXscUdpServer)
}
XmsgImAuthCfgXscUdpServer::XmsgImAuthCfgXscUdpServer(const XmsgImAuthCfgXscUdpServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImAuthCfgXscUdpServer)
}

void XmsgImAuthCfgXscUdpServer::SharedCtor() {
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImAuthCfgXscUdpServer::~XmsgImAuthCfgXscUdpServer() {
  // @@protoc_insertion_point(destructor:XmsgImAuthCfgXscUdpServer)
  SharedDtor();
}

void XmsgImAuthCfgXscUdpServer::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImAuthCfgXscUdpServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImAuthCfgXscUdpServer::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImAuthCfgXscUdpServer& XmsgImAuthCfgXscUdpServer::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscUdpServer();
  return *internal_default_instance();
}

XmsgImAuthCfgXscUdpServer* XmsgImAuthCfgXscUdpServer::New(::google::protobuf::Arena* arena) const {
  XmsgImAuthCfgXscUdpServer* n = new XmsgImAuthCfgXscUdpServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImAuthCfgXscUdpServer::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImAuthCfgXscUdpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImAuthCfgXscUdpServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImAuthCfgXscUdpServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgXscUdpServer.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImAuthCfgXscUdpServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImAuthCfgXscUdpServer)
  return false;
#undef DO_
}

void XmsgImAuthCfgXscUdpServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImAuthCfgXscUdpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXscUdpServer.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImAuthCfgXscUdpServer)
}

::google::protobuf::uint8* XmsgImAuthCfgXscUdpServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImAuthCfgXscUdpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXscUdpServer.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImAuthCfgXscUdpServer)
  return target;
}

size_t XmsgImAuthCfgXscUdpServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImAuthCfgXscUdpServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImAuthCfgXscUdpServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImAuthCfgXscUdpServer)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImAuthCfgXscUdpServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImAuthCfgXscUdpServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImAuthCfgXscUdpServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImAuthCfgXscUdpServer)
    MergeFrom(*source);
  }
}

void XmsgImAuthCfgXscUdpServer::MergeFrom(const XmsgImAuthCfgXscUdpServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImAuthCfgXscUdpServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
}

void XmsgImAuthCfgXscUdpServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImAuthCfgXscUdpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImAuthCfgXscUdpServer::CopyFrom(const XmsgImAuthCfgXscUdpServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImAuthCfgXscUdpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImAuthCfgXscUdpServer::IsInitialized() const {
  return true;
}

void XmsgImAuthCfgXscUdpServer::Swap(XmsgImAuthCfgXscUdpServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImAuthCfgXscUdpServer::InternalSwap(XmsgImAuthCfgXscUdpServer* other) {
  using std::swap;
  addr_.Swap(&other->addr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImAuthCfgXscUdpServer::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImAuthCfgXscRudpServer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImAuthCfgXscRudpServer::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImAuthCfgXscRudpServer::XmsgImAuthCfgXscRudpServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscRudpServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImAuthCfgXscRudpServer)
}
XmsgImAuthCfgXscRudpServer::XmsgImAuthCfgXscRudpServer(const XmsgImAuthCfgXscRudpServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImAuthCfgXscRudpServer)
}

void XmsgImAuthCfgXscRudpServer::SharedCtor() {
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImAuthCfgXscRudpServer::~XmsgImAuthCfgXscRudpServer() {
  // @@protoc_insertion_point(destructor:XmsgImAuthCfgXscRudpServer)
  SharedDtor();
}

void XmsgImAuthCfgXscRudpServer::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImAuthCfgXscRudpServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImAuthCfgXscRudpServer::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImAuthCfgXscRudpServer& XmsgImAuthCfgXscRudpServer::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXscRudpServer();
  return *internal_default_instance();
}

XmsgImAuthCfgXscRudpServer* XmsgImAuthCfgXscRudpServer::New(::google::protobuf::Arena* arena) const {
  XmsgImAuthCfgXscRudpServer* n = new XmsgImAuthCfgXscRudpServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImAuthCfgXscRudpServer::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImAuthCfgXscRudpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImAuthCfgXscRudpServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImAuthCfgXscRudpServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgXscRudpServer.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImAuthCfgXscRudpServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImAuthCfgXscRudpServer)
  return false;
#undef DO_
}

void XmsgImAuthCfgXscRudpServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImAuthCfgXscRudpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXscRudpServer.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImAuthCfgXscRudpServer)
}

::google::protobuf::uint8* XmsgImAuthCfgXscRudpServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImAuthCfgXscRudpServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXscRudpServer.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImAuthCfgXscRudpServer)
  return target;
}

size_t XmsgImAuthCfgXscRudpServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImAuthCfgXscRudpServer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImAuthCfgXscRudpServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImAuthCfgXscRudpServer)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImAuthCfgXscRudpServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImAuthCfgXscRudpServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImAuthCfgXscRudpServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImAuthCfgXscRudpServer)
    MergeFrom(*source);
  }
}

void XmsgImAuthCfgXscRudpServer::MergeFrom(const XmsgImAuthCfgXscRudpServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImAuthCfgXscRudpServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
}

void XmsgImAuthCfgXscRudpServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImAuthCfgXscRudpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImAuthCfgXscRudpServer::CopyFrom(const XmsgImAuthCfgXscRudpServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImAuthCfgXscRudpServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImAuthCfgXscRudpServer::IsInitialized() const {
  return true;
}

void XmsgImAuthCfgXscRudpServer::Swap(XmsgImAuthCfgXscRudpServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImAuthCfgXscRudpServer::InternalSwap(XmsgImAuthCfgXscRudpServer* other) {
  using std::swap;
  addr_.Swap(&other->addr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImAuthCfgXscRudpServer::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImAuthCfgXmsgNeH2nAddr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImAuthCfgXmsgNeH2nAddr::kNegFieldNumber;
const int XmsgImAuthCfgXmsgNeH2nAddr::kAddrFieldNumber;
const int XmsgImAuthCfgXmsgNeH2nAddr::kPwdFieldNumber;
const int XmsgImAuthCfgXmsgNeH2nAddr::kAlgFieldNumber;
const int XmsgImAuthCfgXmsgNeH2nAddr::kRedundantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImAuthCfgXmsgNeH2nAddr::XmsgImAuthCfgXmsgNeH2nAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXmsgNeH2nAddr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImAuthCfgXmsgNeH2nAddr)
}
XmsgImAuthCfgXmsgNeH2nAddr::XmsgImAuthCfgXmsgNeH2nAddr(const XmsgImAuthCfgXmsgNeH2nAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.neg().size() > 0) {
    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pwd().size() > 0) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  alg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alg().size() > 0) {
    alg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alg_);
  }
  redundant_ = from.redundant_;
  // @@protoc_insertion_point(copy_constructor:XmsgImAuthCfgXmsgNeH2nAddr)
}

void XmsgImAuthCfgXmsgNeH2nAddr::SharedCtor() {
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redundant_ = 0u;
  _cached_size_ = 0;
}

XmsgImAuthCfgXmsgNeH2nAddr::~XmsgImAuthCfgXmsgNeH2nAddr() {
  // @@protoc_insertion_point(destructor:XmsgImAuthCfgXmsgNeH2nAddr)
  SharedDtor();
}

void XmsgImAuthCfgXmsgNeH2nAddr::SharedDtor() {
  neg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImAuthCfgXmsgNeH2nAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImAuthCfgXmsgNeH2nAddr::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImAuthCfgXmsgNeH2nAddr& XmsgImAuthCfgXmsgNeH2nAddr::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXmsgNeH2nAddr();
  return *internal_default_instance();
}

XmsgImAuthCfgXmsgNeH2nAddr* XmsgImAuthCfgXmsgNeH2nAddr::New(::google::protobuf::Arena* arena) const {
  XmsgImAuthCfgXmsgNeH2nAddr* n = new XmsgImAuthCfgXmsgNeH2nAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImAuthCfgXmsgNeH2nAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImAuthCfgXmsgNeH2nAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redundant_ = 0u;
  _internal_metadata_.Clear();
}

bool XmsgImAuthCfgXmsgNeH2nAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImAuthCfgXmsgNeH2nAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string neg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neg().data(), static_cast<int>(this->neg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgXmsgNeH2nAddr.neg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgXmsgNeH2nAddr.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pwd().data(), static_cast<int>(this->pwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgXmsgNeH2nAddr.pwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string alg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alg().data(), static_cast<int>(this->alg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgXmsgNeH2nAddr.alg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 redundant = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redundant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImAuthCfgXmsgNeH2nAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImAuthCfgXmsgNeH2nAddr)
  return false;
#undef DO_
}

void XmsgImAuthCfgXmsgNeH2nAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImAuthCfgXmsgNeH2nAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXmsgNeH2nAddr.neg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->neg(), output);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXmsgNeH2nAddr.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->addr(), output);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXmsgNeH2nAddr.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // string alg = 4;
  if (this->alg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alg().data(), static_cast<int>(this->alg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXmsgNeH2nAddr.alg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->alg(), output);
  }

  // uint32 redundant = 5;
  if (this->redundant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->redundant(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImAuthCfgXmsgNeH2nAddr)
}

::google::protobuf::uint8* XmsgImAuthCfgXmsgNeH2nAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImAuthCfgXmsgNeH2nAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXmsgNeH2nAddr.neg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->neg(), target);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXmsgNeH2nAddr.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addr(), target);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXmsgNeH2nAddr.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // string alg = 4;
  if (this->alg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alg().data(), static_cast<int>(this->alg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXmsgNeH2nAddr.alg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->alg(), target);
  }

  // uint32 redundant = 5;
  if (this->redundant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->redundant(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImAuthCfgXmsgNeH2nAddr)
  return target;
}

size_t XmsgImAuthCfgXmsgNeH2nAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImAuthCfgXmsgNeH2nAddr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string neg = 1;
  if (this->neg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neg());
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());
  }

  // string alg = 4;
  if (this->alg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alg());
  }

  // uint32 redundant = 5;
  if (this->redundant() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->redundant());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImAuthCfgXmsgNeH2nAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImAuthCfgXmsgNeH2nAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImAuthCfgXmsgNeH2nAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImAuthCfgXmsgNeH2nAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImAuthCfgXmsgNeH2nAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImAuthCfgXmsgNeH2nAddr)
    MergeFrom(*source);
  }
}

void XmsgImAuthCfgXmsgNeH2nAddr::MergeFrom(const XmsgImAuthCfgXmsgNeH2nAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImAuthCfgXmsgNeH2nAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.neg().size() > 0) {

    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.alg().size() > 0) {

    alg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alg_);
  }
  if (from.redundant() != 0) {
    set_redundant(from.redundant());
  }
}

void XmsgImAuthCfgXmsgNeH2nAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImAuthCfgXmsgNeH2nAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImAuthCfgXmsgNeH2nAddr::CopyFrom(const XmsgImAuthCfgXmsgNeH2nAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImAuthCfgXmsgNeH2nAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImAuthCfgXmsgNeH2nAddr::IsInitialized() const {
  return true;
}

void XmsgImAuthCfgXmsgNeH2nAddr::Swap(XmsgImAuthCfgXmsgNeH2nAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImAuthCfgXmsgNeH2nAddr::InternalSwap(XmsgImAuthCfgXmsgNeH2nAddr* other) {
  using std::swap;
  neg_.Swap(&other->neg_);
  addr_.Swap(&other->addr_);
  pwd_.Swap(&other->pwd_);
  alg_.Swap(&other->alg_);
  swap(redundant_, other->redundant_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImAuthCfgXmsgNeH2nAddr::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImAuthCfgXmsgNeN2hAddr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImAuthCfgXmsgNeN2hAddr::kNegFieldNumber;
const int XmsgImAuthCfgXmsgNeN2hAddr::kCgtFieldNumber;
const int XmsgImAuthCfgXmsgNeN2hAddr::kPwdFieldNumber;
const int XmsgImAuthCfgXmsgNeN2hAddr::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImAuthCfgXmsgNeN2hAddr::XmsgImAuthCfgXmsgNeN2hAddr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXmsgNeN2hAddr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImAuthCfgXmsgNeN2hAddr)
}
XmsgImAuthCfgXmsgNeN2hAddr::XmsgImAuthCfgXmsgNeN2hAddr(const XmsgImAuthCfgXmsgNeN2hAddr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.neg().size() > 0) {
    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cgt().size() > 0) {
    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pwd().size() > 0) {
    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.addr().size() > 0) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImAuthCfgXmsgNeN2hAddr)
}

void XmsgImAuthCfgXmsgNeN2hAddr::SharedCtor() {
  neg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImAuthCfgXmsgNeN2hAddr::~XmsgImAuthCfgXmsgNeN2hAddr() {
  // @@protoc_insertion_point(destructor:XmsgImAuthCfgXmsgNeN2hAddr)
  SharedDtor();
}

void XmsgImAuthCfgXmsgNeN2hAddr::SharedDtor() {
  neg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImAuthCfgXmsgNeN2hAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImAuthCfgXmsgNeN2hAddr::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImAuthCfgXmsgNeN2hAddr& XmsgImAuthCfgXmsgNeN2hAddr::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgXmsgNeN2hAddr();
  return *internal_default_instance();
}

XmsgImAuthCfgXmsgNeN2hAddr* XmsgImAuthCfgXmsgNeN2hAddr::New(::google::protobuf::Arena* arena) const {
  XmsgImAuthCfgXmsgNeN2hAddr* n = new XmsgImAuthCfgXmsgNeN2hAddr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImAuthCfgXmsgNeN2hAddr::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImAuthCfgXmsgNeN2hAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cgt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImAuthCfgXmsgNeN2hAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImAuthCfgXmsgNeN2hAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string neg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_neg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->neg().data(), static_cast<int>(this->neg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgXmsgNeN2hAddr.neg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cgt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cgt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cgt().data(), static_cast<int>(this->cgt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgXmsgNeN2hAddr.cgt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pwd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pwd().data(), static_cast<int>(this->pwd().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgXmsgNeN2hAddr.pwd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string addr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->addr().data(), static_cast<int>(this->addr().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthCfgXmsgNeN2hAddr.addr"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImAuthCfgXmsgNeN2hAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImAuthCfgXmsgNeN2hAddr)
  return false;
#undef DO_
}

void XmsgImAuthCfgXmsgNeN2hAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImAuthCfgXmsgNeN2hAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXmsgNeN2hAddr.neg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->neg(), output);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXmsgNeN2hAddr.cgt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cgt(), output);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXmsgNeN2hAddr.pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pwd(), output);
  }

  // string addr = 4;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXmsgNeN2hAddr.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->addr(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImAuthCfgXmsgNeN2hAddr)
}

::google::protobuf::uint8* XmsgImAuthCfgXmsgNeN2hAddr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImAuthCfgXmsgNeN2hAddr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string neg = 1;
  if (this->neg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->neg().data(), static_cast<int>(this->neg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXmsgNeN2hAddr.neg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->neg(), target);
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cgt().data(), static_cast<int>(this->cgt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXmsgNeN2hAddr.cgt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cgt(), target);
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pwd().data(), static_cast<int>(this->pwd().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXmsgNeN2hAddr.pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }

  // string addr = 4;
  if (this->addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->addr().data(), static_cast<int>(this->addr().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthCfgXmsgNeN2hAddr.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->addr(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImAuthCfgXmsgNeN2hAddr)
  return target;
}

size_t XmsgImAuthCfgXmsgNeN2hAddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImAuthCfgXmsgNeN2hAddr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string neg = 1;
  if (this->neg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->neg());
  }

  // string cgt = 2;
  if (this->cgt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cgt());
  }

  // string pwd = 3;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pwd());
  }

  // string addr = 4;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImAuthCfgXmsgNeN2hAddr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImAuthCfgXmsgNeN2hAddr)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImAuthCfgXmsgNeN2hAddr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImAuthCfgXmsgNeN2hAddr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImAuthCfgXmsgNeN2hAddr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImAuthCfgXmsgNeN2hAddr)
    MergeFrom(*source);
  }
}

void XmsgImAuthCfgXmsgNeN2hAddr::MergeFrom(const XmsgImAuthCfgXmsgNeN2hAddr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImAuthCfgXmsgNeN2hAddr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.neg().size() > 0) {

    neg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.neg_);
  }
  if (from.cgt().size() > 0) {

    cgt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cgt_);
  }
  if (from.pwd().size() > 0) {

    pwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pwd_);
  }
  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
}

void XmsgImAuthCfgXmsgNeN2hAddr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImAuthCfgXmsgNeN2hAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImAuthCfgXmsgNeN2hAddr::CopyFrom(const XmsgImAuthCfgXmsgNeN2hAddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImAuthCfgXmsgNeN2hAddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImAuthCfgXmsgNeN2hAddr::IsInitialized() const {
  return true;
}

void XmsgImAuthCfgXmsgNeN2hAddr::Swap(XmsgImAuthCfgXmsgNeN2hAddr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImAuthCfgXmsgNeN2hAddr::InternalSwap(XmsgImAuthCfgXmsgNeN2hAddr* other) {
  using std::swap;
  neg_.Swap(&other->neg_);
  cgt_.Swap(&other->cgt_);
  pwd_.Swap(&other->pwd_);
  addr_.Swap(&other->addr_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImAuthCfgXmsgNeN2hAddr::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImAuthPubService::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImAuthPubService::kNameFieldNumber;
const int XmsgImAuthPubService::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImAuthPubService::XmsgImAuthPubService()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthPubService();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImAuthPubService)
}
XmsgImAuthPubService::XmsgImAuthPubService(const XmsgImAuthPubService& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      addr_(from.addr_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImAuthPubService)
}

void XmsgImAuthPubService::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImAuthPubService::~XmsgImAuthPubService() {
  // @@protoc_insertion_point(destructor:XmsgImAuthPubService)
  SharedDtor();
}

void XmsgImAuthPubService::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImAuthPubService::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImAuthPubService::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImAuthPubService& XmsgImAuthPubService::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthPubService();
  return *internal_default_instance();
}

XmsgImAuthPubService* XmsgImAuthPubService::New(::google::protobuf::Arena* arena) const {
  XmsgImAuthPubService* n = new XmsgImAuthPubService;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImAuthPubService::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImAuthPubService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImAuthPubService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImAuthPubService)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthPubService.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .XmsgImAuthPubServiceAddress addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImAuthPubService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImAuthPubService)
  return false;
#undef DO_
}

void XmsgImAuthPubService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImAuthPubService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthPubService.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .XmsgImAuthPubServiceAddress addr = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->addr(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImAuthPubService)
}

::google::protobuf::uint8* XmsgImAuthPubService::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImAuthPubService)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthPubService.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .XmsgImAuthPubServiceAddress addr = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->addr(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImAuthPubService)
  return target;
}

size_t XmsgImAuthPubService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImAuthPubService)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .XmsgImAuthPubServiceAddress addr = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->addr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->addr(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImAuthPubService::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImAuthPubService)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImAuthPubService* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImAuthPubService>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImAuthPubService)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImAuthPubService)
    MergeFrom(*source);
  }
}

void XmsgImAuthPubService::MergeFrom(const XmsgImAuthPubService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImAuthPubService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addr_.MergeFrom(from.addr_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void XmsgImAuthPubService::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImAuthPubService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImAuthPubService::CopyFrom(const XmsgImAuthPubService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImAuthPubService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImAuthPubService::IsInitialized() const {
  return true;
}

void XmsgImAuthPubService::Swap(XmsgImAuthPubService* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImAuthPubService::InternalSwap(XmsgImAuthPubService* other) {
  using std::swap;
  addr_.InternalSwap(&other->addr_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImAuthPubService::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImAuthPubServiceAddress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImAuthPubServiceAddress::kHostFieldNumber;
const int XmsgImAuthPubServiceAddress::kProtoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImAuthPubServiceAddress::XmsgImAuthPubServiceAddress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthPubServiceAddress();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImAuthPubServiceAddress)
}
XmsgImAuthPubServiceAddress::XmsgImAuthPubServiceAddress(const XmsgImAuthPubServiceAddress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  proto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proto().size() > 0) {
    proto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_);
  }
  // @@protoc_insertion_point(copy_constructor:XmsgImAuthPubServiceAddress)
}

void XmsgImAuthPubServiceAddress::SharedCtor() {
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

XmsgImAuthPubServiceAddress::~XmsgImAuthPubServiceAddress() {
  // @@protoc_insertion_point(destructor:XmsgImAuthPubServiceAddress)
  SharedDtor();
}

void XmsgImAuthPubServiceAddress::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void XmsgImAuthPubServiceAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImAuthPubServiceAddress::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImAuthPubServiceAddress& XmsgImAuthPubServiceAddress::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthPubServiceAddress();
  return *internal_default_instance();
}

XmsgImAuthPubServiceAddress* XmsgImAuthPubServiceAddress::New(::google::protobuf::Arena* arena) const {
  XmsgImAuthPubServiceAddress* n = new XmsgImAuthPubServiceAddress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImAuthPubServiceAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImAuthPubServiceAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proto_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool XmsgImAuthPubServiceAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImAuthPubServiceAddress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthPubServiceAddress.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proto = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proto()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proto().data(), static_cast<int>(this->proto().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "XmsgImAuthPubServiceAddress.proto"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImAuthPubServiceAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImAuthPubServiceAddress)
  return false;
#undef DO_
}

void XmsgImAuthPubServiceAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImAuthPubServiceAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthPubServiceAddress.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // string proto = 2;
  if (this->proto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proto().data(), static_cast<int>(this->proto().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthPubServiceAddress.proto");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->proto(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImAuthPubServiceAddress)
}

::google::protobuf::uint8* XmsgImAuthPubServiceAddress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImAuthPubServiceAddress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthPubServiceAddress.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // string proto = 2;
  if (this->proto().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proto().data(), static_cast<int>(this->proto().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "XmsgImAuthPubServiceAddress.proto");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->proto(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImAuthPubServiceAddress)
  return target;
}

size_t XmsgImAuthPubServiceAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImAuthPubServiceAddress)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string proto = 2;
  if (this->proto().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proto());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImAuthPubServiceAddress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImAuthPubServiceAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImAuthPubServiceAddress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImAuthPubServiceAddress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImAuthPubServiceAddress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImAuthPubServiceAddress)
    MergeFrom(*source);
  }
}

void XmsgImAuthPubServiceAddress::MergeFrom(const XmsgImAuthPubServiceAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImAuthPubServiceAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.proto().size() > 0) {

    proto_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proto_);
  }
}

void XmsgImAuthPubServiceAddress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImAuthPubServiceAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImAuthPubServiceAddress::CopyFrom(const XmsgImAuthPubServiceAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImAuthPubServiceAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImAuthPubServiceAddress::IsInitialized() const {
  return true;
}

void XmsgImAuthPubServiceAddress::Swap(XmsgImAuthPubServiceAddress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImAuthPubServiceAddress::InternalSwap(XmsgImAuthPubServiceAddress* other) {
  using std::swap;
  host_.Swap(&other->host_);
  proto_.Swap(&other->proto_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImAuthPubServiceAddress::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void XmsgImAuthCfgMisc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int XmsgImAuthCfgMisc::kRegisteEnableFieldNumber;
const int XmsgImAuthCfgMisc::kTokenExpiredSecondsFieldNumber;
const int XmsgImAuthCfgMisc::kTokenSaveBatchSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

XmsgImAuthCfgMisc::XmsgImAuthCfgMisc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgMisc();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:XmsgImAuthCfgMisc)
}
XmsgImAuthCfgMisc::XmsgImAuthCfgMisc(const XmsgImAuthCfgMisc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&registeenable_, &from.registeenable_,
    static_cast<size_t>(reinterpret_cast<char*>(&tokensavebatchsize_) -
    reinterpret_cast<char*>(&registeenable_)) + sizeof(tokensavebatchsize_));
  // @@protoc_insertion_point(copy_constructor:XmsgImAuthCfgMisc)
}

void XmsgImAuthCfgMisc::SharedCtor() {
  ::memset(&registeenable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tokensavebatchsize_) -
      reinterpret_cast<char*>(&registeenable_)) + sizeof(tokensavebatchsize_));
  _cached_size_ = 0;
}

XmsgImAuthCfgMisc::~XmsgImAuthCfgMisc() {
  // @@protoc_insertion_point(destructor:XmsgImAuthCfgMisc)
  SharedDtor();
}

void XmsgImAuthCfgMisc::SharedDtor() {
}

void XmsgImAuthCfgMisc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* XmsgImAuthCfgMisc::descriptor() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const XmsgImAuthCfgMisc& XmsgImAuthCfgMisc::default_instance() {
  ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::InitDefaultsXmsgImAuthCfgMisc();
  return *internal_default_instance();
}

XmsgImAuthCfgMisc* XmsgImAuthCfgMisc::New(::google::protobuf::Arena* arena) const {
  XmsgImAuthCfgMisc* n = new XmsgImAuthCfgMisc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void XmsgImAuthCfgMisc::Clear() {
// @@protoc_insertion_point(message_clear_start:XmsgImAuthCfgMisc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&registeenable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tokensavebatchsize_) -
      reinterpret_cast<char*>(&registeenable_)) + sizeof(tokensavebatchsize_));
  _internal_metadata_.Clear();
}

bool XmsgImAuthCfgMisc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:XmsgImAuthCfgMisc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool registeEnable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &registeenable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tokenExpiredSeconds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tokenexpiredseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 tokenSaveBatchSize = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tokensavebatchsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:XmsgImAuthCfgMisc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:XmsgImAuthCfgMisc)
  return false;
#undef DO_
}

void XmsgImAuthCfgMisc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:XmsgImAuthCfgMisc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool registeEnable = 3;
  if (this->registeenable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->registeenable(), output);
  }

  // uint32 tokenExpiredSeconds = 4;
  if (this->tokenexpiredseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tokenexpiredseconds(), output);
  }

  // uint32 tokenSaveBatchSize = 5;
  if (this->tokensavebatchsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tokensavebatchsize(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:XmsgImAuthCfgMisc)
}

::google::protobuf::uint8* XmsgImAuthCfgMisc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:XmsgImAuthCfgMisc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool registeEnable = 3;
  if (this->registeenable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->registeenable(), target);
  }

  // uint32 tokenExpiredSeconds = 4;
  if (this->tokenexpiredseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tokenexpiredseconds(), target);
  }

  // uint32 tokenSaveBatchSize = 5;
  if (this->tokensavebatchsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tokensavebatchsize(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:XmsgImAuthCfgMisc)
  return target;
}

size_t XmsgImAuthCfgMisc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:XmsgImAuthCfgMisc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool registeEnable = 3;
  if (this->registeenable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 tokenExpiredSeconds = 4;
  if (this->tokenexpiredseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tokenexpiredseconds());
  }

  // uint32 tokenSaveBatchSize = 5;
  if (this->tokensavebatchsize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tokensavebatchsize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void XmsgImAuthCfgMisc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:XmsgImAuthCfgMisc)
  GOOGLE_DCHECK_NE(&from, this);
  const XmsgImAuthCfgMisc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const XmsgImAuthCfgMisc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:XmsgImAuthCfgMisc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:XmsgImAuthCfgMisc)
    MergeFrom(*source);
  }
}

void XmsgImAuthCfgMisc::MergeFrom(const XmsgImAuthCfgMisc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:XmsgImAuthCfgMisc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.registeenable() != 0) {
    set_registeenable(from.registeenable());
  }
  if (from.tokenexpiredseconds() != 0) {
    set_tokenexpiredseconds(from.tokenexpiredseconds());
  }
  if (from.tokensavebatchsize() != 0) {
    set_tokensavebatchsize(from.tokensavebatchsize());
  }
}

void XmsgImAuthCfgMisc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:XmsgImAuthCfgMisc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XmsgImAuthCfgMisc::CopyFrom(const XmsgImAuthCfgMisc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:XmsgImAuthCfgMisc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XmsgImAuthCfgMisc::IsInitialized() const {
  return true;
}

void XmsgImAuthCfgMisc::Swap(XmsgImAuthCfgMisc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void XmsgImAuthCfgMisc::InternalSwap(XmsgImAuthCfgMisc* other) {
  using std::swap;
  swap(registeenable_, other->registeenable_);
  swap(tokenexpiredseconds_, other->tokenexpiredseconds_);
  swap(tokensavebatchsize_, other->tokensavebatchsize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata XmsgImAuthCfgMisc::GetMetadata() const {
  protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cfg_2dx_2dmsg_2dim_2dauth_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
